```julia
using Pumas, Random, PumasUtilities
interactive!(false)
```

This tutorial will demonstrate sotalol accelerated dosing strategies to decrease length of hospital stay after sotalol initiation. The original article is
published [here](https://www.ncbi.nlm.nih.gov/pubmed/31328888)

## Background

Oral Sotalol used in adults for sinus rhythm-control is initiated at 80 mg BID (two times a day) and titrated to a maximum safe dose.
FDA recommends QTc (corrected QT interval) monitoring for at least 3 days, until steady-state (SS) exposure of the drug is reached, before patient discharge, which can significantly impact the total cost of treatment.

The primary goal of this work was to develop a dosing strategy that uses the intravenous formulation of sotalol along with the oral dose to reduce the hospital length of stay.

The following information is already available from the [FDA clnical pharmacology reviews]():

1. Sotalol pharmacokinetic (PK) model
2. Relation between sotalol pharmacokinetics and QTc prolongation (PKPD)

The PKPD model for sotalol was then translated to Pumas
```julia
sotalol_PKPD_model = @model begin
    @param   begin
        tvka         ∈ RealDomain(lower=0)
        tvcl         ∈ RealDomain(lower=0)
        tvvc         ∈ RealDomain(lower=0)
        tvq          ∈ RealDomain(lower=0)
        tvvp         ∈ RealDomain(lower=0)
        tvlag       ∈ RealDomain(lower=0)
        tvbio        ∈ RealDomain(lower=0)
        tve0         ∈ RealDomain(lower=0)
        tvslp        ∈ RealDomain(lower=0)
        Ω            ∈ PDiagDomain(5)
        σ_prop_PK    ∈ RealDomain(lower=0)
        σ_prop_PD    ∈ RealDomain(lower=0)
    end

    @random begin
      η ~ MvNormal(Ω)
    end

    @covariates begin
        "Body Weight (kg)"
        wt 
        "Chronic Kidney Indication"
        isCKI
    end

    @pre begin
        CL    = tvcl  * (0.5)^isCKI * (wt/70)^0.75 * exp(η[1])
        Vc    = tvvc  * (wt/70)      * exp(η[2])
        Q     = tvq   * (wt/70)^0.75 
        Vp    = tvvp  * (wt/70)
        Ka    = tvka  * exp(η[3])
        e0    = tve0  * exp(η[4])
        Slope = tvslp * exp(η[5])
    end

    @dosecontrol begin
        lags = (Depot = tvlag,)
        bioav = (Central = tvbio,)
    end
     
    @dynamics Depots1Central1Periph1

    @observed begin
        cp  = @. (Central/(Vc/1000))
        qtc = @. e0 + (Slope*cp)
    end
end
```

The parameters of the model are defined below

```julia
parameters_PKPD = (
                   tvbio = 1.0667,
                   tvka  = 0.605, 
                   tvlag = 0.231,
                   tvcl  = 12, 
                   tvvc  = 77.1, 
                   tvq   = 9.22,
                   tvvp  = 52.3, 
                   tve0  = 405, 
                   tvslp = 0.0158,
                   Ω = Diagonal([0.4692, 0.0198, 0.0713, 0.0025, 0.034]),
                   σ_prop_PK = 0.06, # made it smaller because it was ridiculously high 0.2285 (%CV of 47.8),
                   σ_prop_PD = 19.1
                    )
```

```julia
randeffs = zero_randeffs(sotalol_PKPD_model, parameters_PKPD)
```

## Traditional dosing strategy and time to stable QTc

Given the model above, let us first simulate a traditional dosing strategy that
is used to initiate patients on sotalol -  80 mg BID

**set up the dosing regimen**

```julia
reg_PO_80 = DosageRegimen(80, cmt=1, time=0, ii=12, addl=5, rate=0)
reg_PO_80_isCKI = DosageRegimen(80, cmt=1, time=0, ii=24, addl=5, rate=0)
```

**create a single subject**

```julia
s1 = Subject(id=1, events=reg_PO_80, covariates = (wt = 70, isCKI=0))
bidpo=simobs(sotalol_PKPD_model, s1, parameters_PKPD,randeffs)
```

```julia
sim_plot(sotalol_PKPD_model, bidpo, observations = [:cp], title = "80 mg PO")
```
It takes about 5-6 doses or 3 days to reach steady-state concentrations of sotalol in plasma.

```julia
sim_plot(sotalol_PKPD_model, bidpo, observations = [:qtc])
```

Similarly, it takes about 3 days for the QTc to stabilize to its new steady-state value.


The approved bioequivalent intravenous dose of sotalol (75 mg) on the
other hand is given as a 5-hour infusion that is tedious.

```julia
reg_IV_75 = DosageRegimen(75,cmt=2,time=0,rate=75/5, ii=12, addl=5)
s2 = Subject(id="75 mg IV", events=reg_IV_75, covariates = (wt = 70, isCKI=0))
bidiv=simobs(sotalol_PKPD_model, s2, parameters_PKPD, randeffs)
sim_plot(sotalol_PKPD_model, bidiv, observations = [:cp])[1]
```

Using either of IV or PO formulations requires three days of hospital stay.

## Proposed alternate dossing regimen with mixed IV and PO administration

While we tested multiple IV loading doses and combinations with oral doses, the table
below best describes the final recommendations for each target oral dose broken down by
kidney function.

| GFR            | Target Oral Dose | IV Loading dose | Maintenance PO dose |
|----------------|------------------|-----------------|---------------------|
| > 60 mL/min    | 80 mg BID        | 40 mg / 1h      | 80 mg BID           |
|                | 120 mg BID       | 40 mg / 1h +    | 120 mg BID          |
|                |                  | 20 mg / 0.5h    |                     |
|                | 160mg BID        | 40 mg / 1h +    | 160mg BID           |
|                |                  | 20 mg / 0.5h +  |                     |
|                |                  | 20 mg / 0.5h    |                     |
| 60 - 40 mL/min | 80 mg QD         | 40 mg / 1h      | 80 mg QD            |
|                | 120 mg QD        | 40 mg / 1h +    | 120 mg QD           |
|                |                  | 10 mg / 0.5h    |                     |
|                | 160mg QD         | 40 mg / 1h +    | 160mg QD            |
|                |                  | 10 mg / 0.5h +  |                     |
|                |                  | 20 mg / 0.5h    |                     |


### Setting up doses and subjects for patients with normal renal function

Based on the table above, the first three dosing regimens can be generated as follows:

**40 mg IV loading dose over 1 hour followed by 80 mg BID maintenance dose**

```julia
reg_IVPO_80 = DosageRegimen([40,80,80], cmt=[2,1,1],
                            time=[0,1,12], ii=[0,0,12],
                            addl=[0,0,4], rate=[40/1,0,0])
reg_PO_80 = DosageRegimen(80, cmt=1, time=0, ii=12, addl=5, rate=0)
s3_po = Subject(id="PO80", events=reg_PO_80, covariates = (wt = 70, isCKI=0))
s3 = Subject(id="IV401h-PO80", events=reg_IVPO_80,
            covariates=(wt = 70, isCKI=0))
reg1 = [s3, s3_po]            
randeffs = zero_randeffs(sotalol_PKPD_model, parameters_PKPD, reg1)
reg1sim=simobs(sotalol_PKPD_model, reg1, parameters_PKPD, randeffs, obstimes=0:0.01:96)
sim_plot(sotalol_PKPD_model, reg1sim, observations = [:cp])[1]
```

**40 mg IV loading dose over 1 hour followed by 20 mg IV for 30 minutes followed by 120 mg BID maintenance dose**

```julia
reg_IVPO_120 = DosageRegimen([40,20,120,120], cmt=[2,2,1,1],
                            time=[0,1,1.5,12],ii=[0,0,0,12],
                            addl=[0,0,0,4], rate=[40/1,20/0.5,0,0])
reg_PO_120 = DosageRegimen(120, cmt=1, time=0, ii=12, addl=5, rate=0)
s4_po = Subject(id="PO120", events=reg_PO_120, covariates = (wt = 70, isCKI=0))
s4 = Subject(id="IV40_1h-IV20_30min-PO120", events= reg_IVPO_120,
            covariates=(wt = 70, isCKI=0))
reg2 = [s4, s4_po]  
randeffs = zero_randeffs(sotalol_PKPD_model, parameters_PKPD, reg2)
reg2sim = simobs(sotalol_PKPD_model, reg2, parameters_PKPD, randeffs, obstimes=0:0.01:96)
sim_plot(sotalol_PKPD_model, reg2sim, observations = [:cp])[1]          
```

**40 mg IV loading dose over 1 hour followed by two 20 mg IV for 30 minutes each followed by 80 mg BID maintenance dose**

```julia
reg_IVPO_160 = DosageRegimen([40,20,20,160,160], 
                            cmt=[2,2,2,1,1],
                            time=[0,1,1.5,2,12],
                            ii=[0,0,0,0,12],
                            addl=[0,0,0,0,4], 
                            rate=[40/1,20/0.5,20/0.5,0,0])
reg_PO_160 = DosageRegimen(160, cmt=1, time=0, ii=12, addl=5, rate=0)
s5_po = Subject(id="PO160", events=reg_PO_160, covariates = (wt = 70, isCKI=0))
s5 = Subject(id="IV40_1h-IV20_30min_x2-PO160", events=reg_IVPO_160,
            covariates=(wt = 70, isCKI=0))
reg3 = [s5, s5_po]  
randeffs = zero_randeffs(sotalol_PKPD_model, parameters_PKPD, reg3)
reg3sim = simobs(sotalol_PKPD_model, reg3, parameters_PKPD, randeffs, obstimes=0:0.01:96)
sim_plot(sotalol_PKPD_model, reg3sim, observations = [:cp])[1]               
```

You can see from all three plots above that the yellow lines that represent the regular oral dosing take
three days to reach steady-state at their target dose. But the combination of IV and oral doses together gets
the patient to steady-state in less than 6 hours usually. This will enable the patients to be monitored only during
day 1 wit the potential to be discharged. The cost savings associated with this early discharge are discussed in
the manuscript.

This tutorial dose not cover the simulations for the chronic kidney disease patients. The only difference here
is that the doses are given once daily instead of two times a day.

## Impact of population variability on QTc prolongation.

We can now simulate a population of 1000 subjects and evaluate the extremes of the QTc prolongation. Since we are
interested in the worst case scenario with respect to the maximum QTc prolongation, we can simulated the highest dose
regimen.


```julia
pop5 = map(i -> 
            Subject(id         = i, 
                    events     = reg_IVPO_160,
                    covariates = (wt    = round.(rand(Normal(70, 10))),
                                  isCKI = 0
                                  )
                    ),               
            1:1000)
sim_pop=simobs(sotalol_PKPD_model, pop5, parameters_PKPD, obstimes=0:0.01:96)
@time sim_plot(sotalol_PKPD_model, sim_pop, observations = [:cp])[1]   
```

However, our interest is to evaluate if the change from baseline
QTc is greater than 30 msec

```julia
simdf = DataFrame(sim_pop)
maxcp = combine(x -> maximum(x.cp), groupby(simdf, :id))
bar = join(simdf, foo, on = :id)
bar.bins = string.(cut(bar.cp_maximum,5))
```
```julia
CSV.write("./data/simpop.csv", sim_pop)
```

```julia;
StatsPlots.@df bar boxplot(:bins,:qtc)
```
