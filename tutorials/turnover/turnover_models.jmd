---
title : Turnover Models
author : Parsshava R Mehta
date: 8th June 2020
---

Load the necessary libraries

```julia
using Pumas, PumasPlots, Random, PlottingUtilities, CairoMakie
```

# Introduction

In this tutorial you will learn the Turnover Model and how to calculate the ncessary parameters using the NCA function

 * Endogenous Compound PK Turnover Model
 * Indirect Response Model - PK/PD Turnover

### Endogenous Compound PK Turnover Model

In this example the hormone is constantly synthesized in the body with a turnover rate and is included in the @init block as the initial concentration in the `Central` compartment. The @init block is mentioned as Rate of Synthesis (Rin)/ Rate of Elimination.

**Note:** The initial concentration in the central compartment are in terms of _amount_ since the equations are in terms of amount

```julia
endo_comp_model = @model begin
  @metadata begin
    timeu = u"hr"
  end

  @param begin
    tvka    ∈ RealDomain(lower=0)
    tvcl    ∈ RealDomain(lower=0)
    tvrin   ∈ RealDomain(lower=0)
    tvvc    ∈ RealDomain(lower=0)
    Ω       ∈ PDiagDomain(2)
  end

  @random begin
    η       ~ MvNormal(Ω)
  end

  @pre begin
    Ka      = tvka *  exp(η[1])
    Cl      = tvcl * (Wt/70)^0.75 * exp(η[2])
    Rin     = tvrin * (Wt/70)
    Vc      = tvvc * (Wt/70)
  end

  @covariates Wt

  @init begin
    Central = Rin/(Cl/Vc)
  end

  @dynamics begin
    Skin'    = -Ka*Skin
    Central' = Ka*Skin + Rin - (Cl/Vc)*Central
  end

  @derived begin
    "Plasma Concentration (Drug+Endogenous Compound) (ug/L)"
    cp             = @. Central/Vc
    "Plasma Concentration (Drug Alone) (ug/L)"
    cp_drug        = @. cp - (Rin/(Cl))
    nca           := @nca cp_drug
    auc            = NCA.auc(nca)
    cmax           = NCA.cmax(nca)
    half_life      = NCA.thalf(nca)
    clearance      = NCA.cl(nca)
    volume_of_dist = NCA.vz(nca)
  end
end
```

Parameters are as given below:

```julia
par1 = ( tvka    = 0.54,     # (h⁻¹)
          tvcl   = 0.028,    # (L/hr/kg)
          tvrin  = 0.78,     # (μg/hr/kg)  Zero-order Rate of Synthesis
          tvvc   = 0.102,    # (L/kg)
          Ω      = Diagonal([0.04,0.0225]))
```

Simulate a _population_ of 5 subjects who receives a SC dose of 40μg at `time=0`

**Note:** The weight is selected randomly between 50 and 100kgs

```julia
sub1 = map(i -> Subject(id=i,
                        events=DosageRegimen(40, time=0, cmt=:Skin),
                        covariates=(Wt=rand(50:100),)), 1:5)
```

Use the `simobs` function to run the simualtion

```julia; results="hidden"
obs1  = simobs(endo_comp_model, sub1, par1, obstimes=0:0.1:40);
```

Convert the `obs1` to a Dataframe. The Plot depicts the Concentration Time Profile of the **Drug + Endogenous Compound vs Time**

```julia
#simdf = DataFrame(obs1)
#@df simdf plot(:time, :cp, group=:id, ylims=(0,350), yticks=[0,50,100,150,200,250,300,350], xlabel="Time (hr)", ylabel="Conc (Drug+Endogenous Compound) (ug/L)", title="Concentration vs Time", legendtitle="Subject Id", linewidth=1.5 )

interactive!(false)
p1 = sim_plot(endo_comp_model,
              obs1, observations = :cp)[1]
Label(p1[0, :], "Plasma Concentration vs Time", textsize = 30)
p1
```

The Plot depicts the Concentration Time Profile of the **Drug Alone vs Time**

```julia
#@df simdf plot(:time, :cp_drug, group=:id, ylims=(0,300), yticks=[0,50,100,150,200,250,300], xlabel="Time (hr)", ylabel="Conc (Drug Alone) (ug/L)", title="Concentration vs Time", legendtitle="Subject Id", linewidth=1.5 )

interactive!(false)
p2 = sim_plot(endo_comp_model,
              obs1, observations = :cp_drug)[1]
Label(p2[0, :], "Plasma Concentration vs Time", textsize = 30)
p2
```

Uisng the integrated NCA fucntion in the model we `Select` the output of the NCA object to a dataframe

```julia
df1 = filter(x -> x.time ==0 && x.amt ==0, simdf)
df1 = select!(df1, :id, :half_life, :clearance, :volume_of_dist, :cmax, :auc)
```

### Indirect Response Model - PK/PD Turnover

In the Indirect Response model there are four different possibility of drug action

 * Inhibtion of the Rate of Synthesis (Kin)
 * Inhbition of the Rate of Degradation (Kout)
 * Stimulation of the Rate of Synthesis (Kin)
 * Stimulation of the Rate of Degradation (Kout)


##### Inhibition of Kin

In this example, the production rate is inhibited and is mentioned in the @vars block. The `Response` compartment is initiated to a baseline values in the @init block.

```julia
inhibition_kin = @model begin
  @metadata begin
    timeu = u"hr"
  end

  @param begin
    tvcl   ∈ RealDomain(lower=0)
    tvvc   ∈ RealDomain(lower=0)
    tvkin  ∈ RealDomain(lower=0)
    tvkout ∈ RealDomain(lower=0)
    tvic50 ∈ RealDomain(lower=0)
    tvimax ∈ RealDomain(lower=0)
    tvγ    ∈ RealDomain(lower=0)
    Ω      ∈ PDiagDomain(2)
  end

  @random begin
    η     ~ MvNormal(Ω)
  end

  @pre begin
    Cl    = tvcl*exp(η[1])
    Vc    = tvvc*exp(η[2])
    Kin   = tvkin
    Kout  = tvkout
    IC50  = tvic50
    Imax  = tvimax
    γ     = tvγ
  end

  @init begin
    Response   = Kin/Kout
  end

  @vars begin
    Inhibition := 1-(Imax*(Central/Vc)^γ/(IC50^γ+(Central/Vc)^γ))
  end

  @dynamics begin
    Central'   = -(Cl/Vc)*Central
    Response'  = Kin*Inhibition - Kout*Response
  end

  @derived begin
    "Plasma Concentration (mg/L)"
    cp   = @. Central/Vc
    "Inhibtion of Kin"
    resp = @. Response
  end
end
```

Parameters are as given below:

```julia
par = ( tvcl   = 2,      # (L/hr)
        tvvc   = 10,     # (L)
        tvkin  = 5,      # (mg/hr), Zero-order rate constant
        tvkout = 1,      # (hr), First-order rate constant
        tvimax = 0.7,    # (mg/hr)
        tvic50 = 7,      # (mg/L)
        tvγ    = 1.5,    # No units
        Ω      = Diagonal([0.01,0.01]))
```

Simulate a population of three subjects who receive the following doses:

 * Subject 1 receives a dose of 100 mg as IV-infusion for 3 hours
 * Subject 2 receives a dose of 200 mg as IV-infusion for 3 hours
 * Subject 3 receives a dose of 200 mg as IV-infusion for 3 hours

```julia
ev1  = DosageRegimen(100, time=0, cmt=:Central, duration=3)
sub1 = Subject(id=100, events=ev1)
ev2  = DosageRegimen(200, time=0, cmt=:Central, duration=3)
sub2 = Subject(id=200, events=ev2)
ev3  = DosageRegimen(300, time=0, cmt=:Central, duration=3)
sub3 = Subject(id=300, events=ev3)
sub  = [sub1, sub2, sub3]

pop = map((subj, amt) -> Subject(id=subj,
                                 events = DosageRegimen(amt, time = 0, cmt = :Central, duration=3),
                                 covariates = (dose = amt,)),
                                 #observations = tmdd_observations),
                                 1:3, #subject ids
                                 [100, 200, 300] # doses
                                 )
```

Use the `simobs` function to run the simulation

```julia; results="hidden"
obs1 = simobs(inhibition_kin, sub, pop, obstimes=0:0.1:40)
```

Convert `obs1` to a DataFrame. Plot a graph of **Concentration vs Time**.

```julia
#simdf = DataFrame(obs1)
#@df simdf plot(:time, :cp, group=:id, xlabel="Time (hr)", ylabel="Concentration (mg/L)", title="Concentration vs Time", legendtitle="Dose", linewidth=1.5)

interactive!(false)
p1 = sim_plot(inhibition_kin,
              obs1, observations = :cp)[1]
Label(p1[0, :], "Plasma Concentration vs Time", textsize = 30)
p1
```

Plot a graph of **Response vs Time**

```julia
#@df simdf plot(:time, :resp, group=:id, xlabel="Time (hr)", ylabel="Inhibtion of Kin", title="Response vs Time", legendtitle="Dose", linewidth=1.5)

interactive!(false)
p2 = sim_plot(inhibition_kin,
              obs1, observations = :resp)[1]
Label(p2[0, :], "Response vs Time", textsize = 30)
p2
```

##### Inhibition of Kout

In this example, the degradation rate is inhibited and is mentioned in the @vars block. The `Response` compartment is initiated to a baseline values in the @init block.

```julia
inhibition_kout = @model begin
  @metadata begin
    timeu = u"hr"
  end

  @param begin
    tvcl   ∈ RealDomain(lower=0)
    tvvc   ∈ RealDomain(lower=0)
    tvkin  ∈ RealDomain(lower=0)
    tvkout ∈ RealDomain(lower=0)
    tvic50 ∈ RealDomain(lower=0)
    tvimax ∈ RealDomain(lower=0)
    tvγ    ∈ RealDomain(lower=0)
    Ω      ∈ PDiagDomain(2)
  end

  @random begin
    η     ~ MvNormal(Ω)
  end

  @pre begin
    Cl    = tvcl*exp(η[1])
    Vc    = tvvc*exp(η[2])
    Kin   = tvkin
    Kout  = tvkout
    IC50  = tvic50
    Imax  = tvimax
    γ     = tvγ
  end

  @init begin
    Response   = Kin/Kout
  end

  @vars begin
    Inhibition := 1-(Imax*(Central/Vc)^γ/(IC50^γ+(Central/Vc)^γ))
  end

  @dynamics begin
    Central'   = -(Cl/Vc)*Central
    Response'  = Kin - Kout*Inhibition*Response
  end

  @derived begin
    "Plasma Concentration (mg/L)"
    cp   = @. Central/Vc
    "Inhibtion of Kout"
    resp = @. Response
  end
end
```

Parameters are as given below:

```julia
par = ( tvcl   = 2,      # (L/hr)
        tvvc   = 10,     # (L)
        tvkin  = 5,      # (mg/hr), Zero-order rate constant
        tvkout = 1,      # (hr), First-order rate constant
        tvimax = 0.7,    # (mg/hr)
        tvic50 = 7,      # (mg/L)
        tvγ    = 1.5,    # No units
        Ω      = Diagonal([0.01,0.01]))
```

Simulate a population of three subjects who receive the following doses:

 * Subject 1 receives a dose of 100 mg as IV-infusion for 3 hours
 * Subject 2 receives a dose of 200 mg as IV-infusion for 3 hours
 * Subject 3 receives a dose of 200 mg as IV-infusion for 3 hours

```julia
ev1  = DosageRegimen(100, time=0, cmt=:Central, duration=3)
sub1 = Subject(id=100, events=ev1)
ev2  = DosageRegimen(200, time=0, cmt=:Central, duration=3)
sub2 = Subject(id=200, events=ev2)
ev3  = DosageRegimen(300, time=0, cmt=:Central, duration=3)
sub3 = Subject(id=300, events=ev3)
sub  = [sub1, sub2, sub3]

pop = map((subj, amt) -> Subject(id=subj,
                                 events = DosageRegimen(amt, time = 0, cmt = :Central, duration=3),
                                 covariates = (dose = amt,)),
                                 #observations = tmdd_observations),
                                 1:3, #subject ids
                                 [100, 200, 300] # doses
                                 )
```

Use the `simobs` function to run the simulation

```julia; results="hidden"
obs1 = simobs(inhibition_kout, sub, par, obstimes=0:0.1:40);
```

Convert `obs1` to a DataFrame. Plot a graph of **Response vs Time**

```julia
#simdf = DataFrame(obs1)
#@df simdf plot(:time, :resp, group=:id, xlabel="Time (hr)", ylabel="Inhibtion of Kout", title="Response vs Time", legendtitle="Dose", linewidth=1.5)

p3 = sim_plot(inhibition_kout,
              obs1, observations = :resp)[1]
Label(p3[0, :], "Response vs Time", textsize = 30)
p3
```

##### Stimulation of Kin

In this example, the production rate is stimulated and is mentioned in the @vars block. The `Response` compartment is initiated to a baseline values in the @init block.

```julia
stimulation_kin = @model begin
  @metadata begin
    timeu = u"hr"
  end

  @param begin
    tvcl   ∈ RealDomain(lower=0)
    tvvc   ∈ RealDomain(lower=0)
    tvkin  ∈ RealDomain(lower=0)
    tvkout ∈ RealDomain(lower=0)
    tvec50 ∈ RealDomain(lower=0)
    tvemax ∈ RealDomain(lower=0)
    tvγ    ∈ RealDomain(lower=0)
    Ω      ∈ PDiagDomain(2)
  end

  @random begin
    η     ~ MvNormal(Ω)
  end

  @pre begin
    Cl    = tvcl*exp(η[1])
    Vc    = tvvc*exp(η[2])
    Kin   = tvkin
    Kout  = tvkout
    EC50  = tvec50
    Emax  = tvemax
    γ     = tvγ
  end

  @init begin
    Response   = Kin/Kout
  end

  @vars begin
    Stimulation := 1+(Emax*(Central/Vc)^γ/(EC50^γ+(Central/Vc)^γ))
  end

  @dynamics begin
    Central'    = -(Cl/Vc)*Central
    Response'   = Kin*Stimulation - Kout*Response
  end

  @derived begin
    "Plasma Concentration (mg/L)"
    cp   = @. Central/Vc
    "Stimulation of Kin"
    resp = @. Response
  end
end
```

Parameters are as given below:

```julia
par = ( tvcl   = 2,      # (L/hr)
        tvvc   = 10,     # (L)
        tvkin  = 5,      # (mg/hr), Zero-order rate constant
        tvkout = 1,      # (hr), First-order rate constant
        tvemax = 0.7,    # (mg/hr)
        tvec50 = 7,      # (mg/L)
        tvγ    = 1.5,    # No units
        Ω      = Diagonal([0.01,0.01]))
```

Simulate a population of three subjects who receive the following doses:

 * Subject 1 receives a dose of 100 mg as IV-infusion for 3 hours
 * Subject 2 receives a dose of 200 mg as IV-infusion for 3 hours
 * Subject 3 receives a dose of 300 mg as IV-infusion for 3 hours

```julia
ev1  = DosageRegimen(100, time=0, cmt=:Central, duration=3)
sub1 = Subject(id=100, events=ev1)
ev2  = DosageRegimen(200, time=0, cmt=:Central, duration=3)
sub2 = Subject(id=200, events=ev2)
ev3  = DosageRegimen(300, time=0, cmt=:Central, duration=3)
sub3 = Subject(id=300, events=ev3)
sub  = [sub1, sub2, sub3]

pop = map((subj, amt) -> Subject(id=subj,
                                 events = DosageRegimen(amt, time = 0, cmt = :Central, duration=3),
                                 covariates = (dose = amt,)),
                                 #observations = tmdd_observations),
                                 1:3, #subject ids
                                 [100, 200, 300] # doses
                                 )
```

Use the `simobs` function to run the simulation

```julia; results="hidden"
obs1  = simobs(stimulation_kin, sub, par, obstimes=0:0.1:40)
```

Convert `obs1` to a DataFrame. Plot a graph of **Response vs Time**

```julia
#simdf = DataFrame(obs1)
#@df simdf plot(:time, :resp, group=:id, xlabel="Time (hr)", ylabel="Stimulation of Kin", title="Response vs Time", legendtitle="Dose", linewidth=1.5)

p4 = sim_plot(stimulation_kin,
              obs1, observations = :resp)[1]
Label(p4[0, :], "Response vs Time", textsize = 30)
p4
```

##### Stimulation of Kout

In this example, the degradation rate is stimulated and is mentioned in the @vars block. The `Response` compartment is initiated to a baseline values in the @init block.

```julia
stimulation_kout = @model begin
  @metadata begin
    timeu = u"hr"
  end

  @param begin
    tvcl   ∈ RealDomain(lower=0)
    tvvc   ∈ RealDomain(lower=0)
    tvkin  ∈ RealDomain(lower=0)
    tvkout ∈ RealDomain(lower=0)
    tvec50 ∈ RealDomain(lower=0)
    tvemax ∈ RealDomain(lower=0)
    tvγ    ∈ RealDomain(lower=0)
    Ω      ∈ PDiagDomain(2)
  end

  @random begin
    η     ~ MvNormal(Ω)
  end

  @pre begin
    Cl    = tvcl*exp(η[1])
    Vc    = tvvc*exp(η[2])
    Kin   = tvkin
    Kout  = tvkout
    EC50  = tvec50
    Emax  = tvemax
    γ     = tvγ
  end

  @init begin
    Response   = Kin/Kout
  end

  @vars begin
    Stimulation := 1+(Emax*(Central/Vc)^γ/(EC50^γ+(Central/Vc)^γ))
  end

  @dynamics begin
    Central'    = -(Cl/Vc)*Central
    Response'   = Kin - Kout*Stimulation*Response
  end

  @derived begin
    "Plasma Concentration (mg/L)"
    cp   = @. Central/Vc
    "Stimulation of Kout"
    resp = @. Response
  end
end
```

Parameters are as given below:

```julia
par = ( tvcl   = 2,      # (L/hr)
        tvvc   = 10,     # (L)
        tvkin  = 5,      # (mg/hr), Zero-order rate constant
        tvkout = 1,      # (hr), First-order rate constant
        tvemax = 0.7,    # (mg/hr)
        tvec50 = 7,      # (mg/L)
        tvγ    = 1.5,    # No units
        Ω      = Diagonal([0.01,0.01]))
```

Simulate a population of three subjects who receive the following doses:

 * Subject 1 receives a dose of 100 mg as IV-infusion for 3 hours
 * Subject 2 receives a dose of 200 mg as IV-infusion for 3 hours
 * Subject 3 receives a dose of 300 mg as IV-infusion for 3 hours

```julia
ev1  = DosageRegimen(100, time=0, cmt=:Central, duration=3)
sub1 = Subject(id=100, events=ev1)
ev2  = DosageRegimen(200, time=0, cmt=:Central, duration=3)
sub2 = Subject(id=200, events=ev2)
ev3  = DosageRegimen(300, time=0, cmt=:Central, duration=3)
sub3 = Subject(id=300, events=ev3)
sub  = [sub1, sub2, sub3]

pop = map((subj, amt) -> Subject(id=subj,
                                 events = DosageRegimen(amt, time = 0, cmt = :Central, duration=3),
                                 covariates = (dose = amt,)),
                                 #observations = tmdd_observations),
                                 1:3, #subject ids
                                 [100, 200, 300] # doses
                                 )
```

Use the `simobs` function to run the simulation

```julia; results="hidden"
obs1  = simobs(stimulation_kout, sub, par, obstimes=0:0.1:40)
```

Convert `obs1` to a DataFrame. Plot a graph of **Response vs Time**

```julia
#simdf = DataFrame(obs1)
#@df simdf plot(:time, :resp, group=:id, xlabel="Time (hr)", ylabel="Stimulation of Kout", title="Response vs Time", legendtitle="Dose", linewidth=1.5)

p5 = sim_plot(stimulation_kout,
              obs1, observations = :resp)[1]
Label(p5[0, :], "Response vs Time", textsize = 30)
p5
```
