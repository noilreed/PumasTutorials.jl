---
title: Pumas.jl Workshop Solutions
author: PumasAI
date: August 2020
---

# Problem 1: Simulate a first-order absorption model with linear elimination after a 100 mg oral dose in 24 subjects

Parameters are: `Ka = 1 hr-1`, `CL = 1 L/hr`, `V = 20 L/hr`.

## Part 1: Setup the population

```julia
using Pumas, Plots, CSV, Random
Random.seed!(0)
```

```julia
single_dose_regimen = DosageRegimen(100)
first(single_dose_regimen.data)
```

to build a single subject

```julia
s1 = Subject(id=1, events=single_dose_regimen, covariates=(Wt=70,))
```

let's first define a function to choose body weight randomly

```julia
choose_covariates() = (Wt = rand(55:80),)
```

Then, we use it to generate a population of subjects with a random weight generated from the covariate function above

```julia
pop = Population(map(i -> Subject(id = i, events=single_dose_regimen, covariates=choose_covariates()),1:24))
```

You can view the generated population using by calling a random subject by index and look at
the subject's

* covariates
* events
* id numbers
* observations
* time

Let us us peek at the first subject's covariates

```julia
pop[1].covariates
```

## Part 2: Write the model

```julia
mymodel = @model begin
  @param   begin
    tvcl ∈ RealDomain(lower=0, init = 1.0)
    tvv ∈ RealDomain(lower=0, init = 20)
    tvka ∈ RealDomain(lower = 0, init= 1)
    Ω ∈ PDiagDomain(init=[0.09,0.09, 0.09])
    σ_prop ∈ RealDomain(lower=0,init=0.04)
  end

  @random begin
    η ~ MvNormal(Ω)
  end

  @pre begin
    CL = tvcl * (Wt/70)^0.75 * exp(η[1])
    Vc  = tvv * (Wt/70) * exp(η[2])
    Ka = tvka * exp(η[3])
  end
  @covariates Wt

  @dynamics Depots1Central1
    #@dynamics begin
    #    Depot' =  -Ka*Depot
    #    Central' =  Ka*Depot - (CL/V)*Central
    #end

  @derived begin
      cp = @. 1000*(Central / Vc)
      dv ~ @. Normal(cp, sqrt(cp^2*σ_prop))
    end
end
```
Note that above, we are using the analytical solution in `@dynamics`. You can switch to using the
differential equation system if you prefer.

## Part 3: Simulate

Let's first extract the model parameters

```julia
param = init_param(mymodel)
```

Then using the `simobs` function, carry out the simulation and visualize the simulation output

```julia;include=false
obs = simobs(mymodel, pop, param, obstimes=0:1:72)
plot(obs)
```

where
* `mymodel` is the model setup in the Part 2,
* `pop` is the population of subjects that was setup in Part 1
* `param` is the specified set of model parameters
* `obstimes` specifies the simulation time period.

# Problem 2: Peform Non-compartmental analysis

We will start by generating a dataframe of the resuls from the simulation step

```julia
simdf = DataFrame(obs)
first(simdf, 6)
```
For the purpose of NCA, let us use the `cp` (output without residual error) as our observed value

To prepare the dataset for NCA analysis, let us use the `read_nca` function. The NCA datasets in Pumas requires
a `route` specification which can either be `iv` or `ev`. Since this is an oral drug administration, lets add that
to the `simdf`.

```julia
simdf[!, :route] .= "ev"
```
Next we can define time, concentration and dose units so the report includes the units for the pharmacokinetic parameters.
The general syntax for units are `u` followed by the unit in quotes `""`.

```julia
timeu = u"hr"
concu = u"mg/L"
amtu  = u"mg"
```

```julia
ncadf = read_nca(simdf, id=:id, time=:time, conc=:cp, amt=:amt,
    route=:route,timeu=timeu, concu=concu, amtu=amtu, lloq=0.4concu)
```

You can view the concentration-time plots by doing

```julia
plot(ncadf)
```

You can then generate `cmax` and `auc` for each subject

```julia
auc = NCA.auc(ncadf)
```

```julia
cmax = NCA.cmax(ncadf)
```

Or generate the entire NCA report using

```julia
report = NCAReport(ncadf)
first(report,6)
```

# Problem 3: Estimate using Non-linear mixed effects

We can use the simulated dataset in the Problem 1 for our estimation. We need a couple of data manipulation steps

1. missing `cmt` should be converted to 2 to reflect central compartment
2. data rows where `time = 0`, and `cp=0` should be removed

```julia
simdf.cmt = ifelse.(ismissing.(simdf.cmt), 2, simdf.cmt)
est_df = simdf[.!((simdf.dv .== 0.0) .& (simdf.cmt .==2)),:]
first(est_df,6)
```

## Part 1: Read datasets for NLME estimation

We can use the `read_pumas` function to prepare the dataset for NLME estimation

```julia
data = read_pumas(est_df, covariates=[:Wt], observations=[:dv])
```
where

* `covariates` is a symbol that maps to the columns of covariates
* `observations` is a symbol that maps to the columns of dependent variables
* since the dataframe has `time` as the variable, the function does not need a specific input


## Part 2: Perform a model fit

We now use the
* `mymodel` model that we wrote earlier
* the set of parameters specified in `param` as initial estimates
* `data` that was read in using the `read_pumas` function

to fit the model.

```julia
res = fit(mymodel, data, param, Pumas.FOCEI())
```

## Part 3: Infer the results

`infer` provides the model inference

```julia
infer(res)
```

## Part 4: Inspect the results

`inspect` gives you the
* model predictions
* residuals
* Empirical Bayes estimates

```julia
preds = DataFrame(predict(res))
first(preds, 6)
```

```julia
resids = DataFrame(wresiduals(res))
first(resids, 6)
```

```julia
ebes = empirical_bayes(res)
```

The `inspect` function provides all the results at once

```julia
resout = DataFrame(inspect(res))
first(resout, 6)
```