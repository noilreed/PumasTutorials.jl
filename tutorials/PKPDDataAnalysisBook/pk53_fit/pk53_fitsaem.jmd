---
title : Exercise PK53 - Fitting Linear Antibody Kinetics
date: `j Date(now())`
---

```julia; echo = false
using Dates
```

## Objectives

In this exercise you will learn how to model **multiple intravenous infusions**. The
 drug is a large molecular compound and thus has a very long half-life.

The basic workflow for the estimation process is:

 1. Description of the data
 2. Exploratory analysis of the data
 3. NCA Analysis
 4. Pharmacokinetic modelling
 5. Diagnostic Plots
 6. Validation

Lets load the necessary `libraries` before we get started

```julia
using PumasTutorials
using Random
using CSV
using Pumas
using Plots
using StatsPlots
using Pipe
using StatsBase
using PrettyTables
```

## Description of the data

A group of 18 monkeys received a multiple intravenous infusion dose escalating
 regimen as shown below:

 * Dose 1:- 0.77 μmol/kg (0 to 25 mins) given as an IV-infusion at `time=0`
 * Dose 2:- 7.7 μmol/kg (72.17 to 72.67 hrs) given as an IV-infusion at `time=72.17`
 * Dose 3:- 77 μmol/kg (144.17 to 144.67 hrs) given as an IV-infusion at `time=144.17`
 * Dose 4:- 257 μmol/kg (216.6 to 217 hrs) given as an IV-infusion at `time=216.6`
 * Dose 5:- 771 μmol/kg (288.52 to 289.02 hrs)  given as an IV-infusion at `time=288.52`

PK samples are collected at `72.67, 74.17, 78.17, 84.17, 96.17, 120.17, 144.17,
 144.67, 146.17, 150.17, 156.17, 168.17, 192.17, 216.17, 217, 218.5, 222.5, 228.5,
 240.5, 264.5, 288.5, 289.02, 290.5, 294.5, 300.5, 312.5, 336.5, 360.5, 483.92, 651.25,
 983.92, 1751.92 hrs`

The following are the units of the dataset:

 * Time (time) = hrs
 * Plasma Concentrations (dv) = μmol/L
 * Dose (amt) = μmol/kg

```julia
pk53_data_df = CSV.read("./pk_53.csv", DataFrame, missingstrings = ["", ".", "NA", "BQL"])
```

Basic summary `statistics` of the data

```julia
stats_pk53_data = describe(pk53_data_df, :min, :max, :mean, :std, :nmissing, cols=[:id,:time,:dv])
```

## Exploratory Plots of the given data

* Plot of Plasma Concentration vs Time

```julia
pk_data_plot = dropmissing(pk53_data_df, :dv)
@df pk_data_plot plot(:time, :dv, group=:id, yaxis=:log, label=false,
                      xlabel="Time (hrs)", ylabel="Concentration (umol/L)",
                      guidefontsize = 12, size = (600, 600),
                      title = "Plasma Concentrations vs Time")
```

 * Plot of Mean Plasma Concentration vs Time

```julia
plasma_mean = combine(groupby(pk_data_plot,[:time]),
                            [col => fun for col in [:dv]
                            for fun in [mean, geomean, std]])

@df plasma_mean plot(:time, :dv_mean, yaxis=:log, label=false,
                      xlabel="Time (hrs)", ylabel="Concentration (umol/L)",
                      guidefontsize = 12, size = (600, 600), linewidth=2,
                      title = "Mean Plasma Concentrations vs Time")
```

We can see an initial drop in concentration at the stop of infusion, this indicates
 that the drug follows a `two-compartment model`

## NCA Analysis

We will perform an `NCA Analysis` to obtain a few parameters. Now, map the data
 variables to the *read_nca* function that prepares the data for NCA analysis.
 You can even type **?read_nca** in the REPL and get more information on the
 mapping of the data.

```julia
pk53_data_nca = select(pk53_data_df, :id, :time, :dv)
dropmissing!(pk53_data_nca)

pk53_nca = read_nca(pk53_data_nca,
                    id     = :id,
                    time   = :time,
                    conc   = :dv)
```

A full NCAReport is generated, we will then perform summary statistics of the
 required parameters to obtain the **Mean, GeometricMean, and SD**

```julia
pk53_nca_report = NCAReport(pk53_nca, sigdig=3)
```

Perform the Summary `Statistics` for the required NCA Parameters

```julia
## Select the required parameters from the NCA Report
stats_nca_df = select(pk53_nca_report, [:id, :aucinf_obs, :kel, :half_life])

## Stack the data for easy computation
stats_nca_stacked = stack(stats_nca_df, [:aucinf_obs, :kel, :half_life], [:id])
stats_nca_summary = combine(groupby(stats_nca_stacked,[:variable]),
                            [col => fun for col in [:value]
                            for fun in [mean, geomean, std]])
```

We can see that the drug has a **long half-life** of 478 hrs.

## Pharmacokinetic Modelling

##### Read the dataset into read_pumas()

```julia
pk53_data = read_pumas(pk53_data_df,
                      id           = :id,
                      time         = :time,
                      observations = [:dv],
                      amt          = :amt,
                      evid         = :evid,
                      rate         = :rate,
                      cmt          = :cmt)
```

##### Two-Compartment Model

```julia
pk_53          = @emmodel begin
  @metadata begin
    desc = "PK53 Two Compartment Model"
    timeu = u"hr"
  end

  @param begin
    Vp       ~ 1 | LogNormal
  end

  @random begin
    "Volume of Central Compartment (L/kg)"
    Vc         ~ 1 | LogNormal
    "Clearance (L/hr/kg)"
    CL         ~ 1 | LogNormal
    "Intercompartmental CLearance (L/hr/kg)"
    Q          ~ 1 | LogNormal
  end

  @dynamics Central1Periph1
    #Central'   = -(Q/Vc)*Central +(Q/Vp)*Peripheral -(CL/Vc)*Central
    #Peripheral'=  (Q/Vc)*Central -(Q/Vp)*Peripheral
  #end

  @post begin
    cp         = Central/Vc
  end

  @error begin
    dv         ~ ProportionalNormal(cp)
  end
end
```

We have obtained the initial parameters `graphically`.

```julia
param_est = ( Vc    = 3,
              Vp    = 2,
              CL    = 0.01,
              Q     = 0.02)
```


##### SAEM Fitting

We will estimate performing using `SAEM`

```julia
pk_53_fit = @time fit(pk_53, pk53_data, param_est,
                        Pumas.SAEM(), ensemblealg = EnsembleThreads())

coeftable(pk_53_fit)
```

