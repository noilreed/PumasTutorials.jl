---
title : Exercise PK14 - Fitting Multi-compartment oral data
date: `j Date(now())`
---

```julia; echo = false
using Dates
```

## Objectives

In this exercise we will learn about the impact of weighting on data. This help us
 understand the importance of weighting and how it improves the parameter precision.
 We continue to refine and analyze the outputs to get the best model to fit the data.
 We will compare the models based on the `diagnostic plots` and `statistics`.

The basic workflow for the estimation process is:

 1. Description of the data
 2. Exploratory analysis of the data
 3. NCA Analysis
 4. Pharmacokinetic modelling
 5. Diagnostic Plots
 6. Validation

Lets load the necessary `libraries` before we get started

```julia
using PumasTutorials
using Random
using CSV
using Pumas
using Plots
using StatsPlots
using Pipe
using StatsBase
using PrettyTables
```

## Description of the data

A new cardiovascular drug is given to a total of **68 subjects**. The drug is given
  orally at a dose of *23,158 μg*. PK samples are collected at the following time
  points `0.08, 0.16, 0.25, 0.5, 1, 1.5, 2, 3, 4, 6, 8, 12, 24, 25 hrs`. A total of
  14 samples are collected from each patient.

The following are the units of the dataset:

 * Time (time) = hrs
 * Plasma Concentration (dv) = μg/L
 * Dose (amt) = μg

```julia
pk14_data_df = CSV.read("./pk_14.csv", DataFrame, missingstrings = ["", ".", "NA", "BQL"])
```

Basic summary `statistics` of the data

```julia
stats_pk14_data = describe(pk14_data_df, :min, :max, :mean, :std, :nmissing, cols=[:id,:time,:dv])
```

## Exploratory Plots of the given data

Plot of Concentration vs Time

```julia
pk_data_plot = dropmissing(pk14_data_df, :dv)
@df pk_data_plot plot(:time, :dv, group=:id, yaxis=:log, label=false,
                      xlabel="Time (hr)", ylabel="Concentration (ug/L)",
                      size = (600, 600), guidefontsize = 12,
                      title = "Concentration vs Time")
```

## NCA Analysis

We will now perform an NCA analysis to get the initial estimates for the fitting
 of the given data. The route column will need to be included to indicate the dosing
 is extravascular `ev`. The *read_nca* function input requires the route to be
 stated as `ev` for extravascular, this will help to compute the parameters correctly.

```julia; results="hidden"
pk14_data_df[:, :route] .= "ev"
```

Now, map the data variables to the *read_nca* function that prepares the data for
 NCA analysis. You can even type *?read_nca* in the REPL and get more information
 on the mapping of the data.

```julia
pk14_nca = read_nca(pk14_data_df,
                    id     = :id,
                    time   = :time,
                    amt    = :amt,
                    conc   = :dv,
                    route  = :route)
```

A full NCAReport is generated, we will then perform summary statistics of the
 required parameters to obtain the **Mean, GeometricMean, and SD**

```julia
pk14_nca_report = NCAReport(pk14_nca, sigdig=3)
```

Perform the Summary `Statistics` for the required NCA Parameters

```julia
## Select the required parameters from the NCA Report
stats_nca_df = select(pk14_nca_report, [:id, :vz_f_obs, :cl_f_obs, :aucinf_obs, :kel, :half_life, :tmax, :tlag])

## Stack the data for easy computation
stats_nca_stacked = stack(stats_nca_df, [:vz_f_obs, :cl_f_obs, :aucinf_obs, :kel, :half_life, :tmax, :tlag,], [:id])
stats_nca_summary = combine(groupby(stats_nca_stacked,[:variable]),
                            [col => fun for col in [:value]
                            for fun in [mean, geomean, std]])
```

We can obtain the Ka value from 0.693/(*tmax*/4) i.e **Ka = 7.07 hr⁻¹**


## Pharmacokinetic Modelling

##### Read the dataset into read_pumas()

We will try to fit a two-compartment model to the given data. Initially we will fit
 the data without any weighting scheme.

```julia
pk14_data = read_pumas(pk14_data_df,
                        id           = :id,
                        time         = :time,
                        observations = [:dv],
                        amt          = :amt,
                        evid         = :evid,
                        cmt          = :cmt)
```

##### Two Compartment Model without Weighting

```julia
pk_14_2cmt      = @emmodel begin
  @metadata begin
    desc = "PK14 Two Compartment"
    timeu = u"hr"
  end

  @param begin
    Q         ~ 1 | LogNormal
    tvlag       ~ 1 | LogNormal
  end

  @random begin
    "Absorption Rate Constant (1/hr)"
    Ka ~ 1 | LogNormal
    "Clearance (L/hr)"
    CL ~ 1 | LogNormal
    "Volume (L)"
    Vc ~ 1 | LogNormal
    "Peripheral Volume (L)"
    Vp ~ 1 | LogNormal
  end

  @pre begin
    lags        = (Depot = tvlag,)
  end

  @dynamics Depots1Central1Periph1
    #Depot'      = -Ka*Depot
    #Central'    =  Ka*Depot - (Cl/Vc)*Central + (Q/Vp)*Peripheral - (Q/Vc)*Central
    #Peripheral' =  (Q/Vc)*Central - (Q/Vp)*Peripheral
  #end

  @post begin
    cp          = Central/Vc
  end

  @error begin
    dv          ~ ProportionalNormal(cp)
  end
end
```

The initial parameters are obtained from NCA analysis. For the Volume of distribution
 we will split the NCA obtained value between the two-compartments. We will provide a
 lower value for the inter-compartmental clearance.

```julia
param_est = ( Ka     = 7,
              Vc     = 292,
              CL     = 54,
              Q      = 20,
              Vp     = 292,
              tvlag  = 0.05)
```

##### SAEM Fitting


We will use the estimates from the previous fit for the current estimation. This
 time we will estimate the `lag` parameter.

```julia
pk_14_fit_2cmt_prop_lag = @time fit(pk_14_2cmt, pk14_data, param_est,
                          Pumas.SAEM(), ensemblealg=EnsembleThreads())


coeftable(pk_14_fit_2cmt_prop_lag)
```

