---
title: Exercise PK20 - Capacity IV - Nonlinear Kinetics
date: `j Date(now())`
---

```julia; echo = false
using Dates
```

### Background

  * Structural Model        - One Compartment Model with Nonlinear elimination.
  * Route of administration - IV bolus
  * Dosage Regimen          - 25 mg, 100 mg
  * Number of Subjects      - 2

![pk20 Graphic Model](https://user-images.githubusercontent.com/62236860/79457758-5e681b80-800e-11ea-8301-2a52a00beac1.png)

### Learing Outcome

This is a one compartment model for IV bolus dose with capacity limited elimination.
 Concentration time profile was obtained for two subjects with different dosage regimen
 and different ``Vmax`` and ``Km`` values.

### Objectives

In this tutorial, you will learn how to build one compartment model for IV bolus
 dose with capacity limited elimination.

### Libraries

Call the "necessary" libraries to get start.

```julia
using Random
using Pumas
using PumasUtilities
using CairoMakie
```

### Model

```julia
pk_20        = @model begin
  @metadata begin
    desc = "One Compartment Model - Nonlinear Elimination"
    timeu = u"hr"
  end

  @param   begin
    "Volume of Central Compartment (L)"
    tvvc     ∈ RealDomain(lower=0)
    "Michaelis menten Constant (μg/L)"
    tvkm     ∈ RealDomain(lower=0)
    "Maximum Rate of Metabolism (μg/hr)"
    tvvmax   ∈ RealDomain(lower=0)
    Ω        ∈ PDiagDomain(3)
    "Proportional RUV"
    σ_prop  ∈ RealDomain(lower=0)
  end

  @random begin
    η        ~ MvNormal(Ω)
  end

  @pre begin
    Vc       = tvvc * exp(η[1])
    Km       = tvkm * exp(η[2])
    Vmax     = tvvmax * exp(η[3])
  end

  @dynamics begin
    Central' = - (Vmax * (Central/Vc)/(Km + (Central/Vc)))
  end

  @derived begin
    cp       = @. Central/Vc
    """
    Observed Concentration (ug/L)
    """
    dv       ~ @. Normal(cp, cp*σ_prop)
  end
end
```

### Parameters

The parameters are as given below. `tv` represents the typical value for parameters.

  * ``Km`` - Michaelis menten Constant (μg/L)
  * ``Vc`` - Volume of Central Compartment (L),
  * ``Vmax`` - Maximum rate of metabolism (μg/hr),
  * ``Ω`` - Between Subject Variability,
  * ``σ`` - Residual error

**Note:-**
  * `param1` are the parameter values for Subject 1
  * `param2` are the parameter values for Subject 2

```julia
param1 = (tvkm    = 261.736,
          tvvmax  = 36175.1,
          tvvc    = 48.9892,
          Ω       = Diagonal([0.0,0.0,0.0]),
          σ_prop = 0.1)
```

```julia
param2 = (param1..., tvkm    = 751.33)
```

We will merge both the parameters

```julia
param = vcat(param1, param2)
```

### Dosage Regimen

 * Subject1 - receives an IV dose of **25 mg or 25000 μg**
 * Subject2 - receives an IV dose of **100 mg or 100000 μg**

```julia; results="hidden"
ev1  = DosageRegimen(25000, time = 0, cmt = 1)
sub1 = Subject(id = 1, events = ev1, time = 0.01:0.01:2, observations = (cp = nothing,))
ev2  = DosageRegimen(100000, time = 0, cmt = 1)
sub2 = Subject(id = 2, events = ev2, time = 0.01:0.01:8, observations = (cp = nothing,))
pop  = [sub1, sub2]
```

### Simulation

Simulate the plasma drug concentration for both the subjects

```julia; results="hidden"
Random.seed!(123)
sim    = map(((subject, paramᵢ),) -> simobs(pk_20, subject, paramᵢ), zip(pop, param))
```

## Visualization

```julia
f, a, p = sim_plot(pk_20, sim, 
        observations = :cp, 
        color = :redsblues,
        linewidth = 4,
        axis = (xlabel = "Time (hour)", 
                ylabel = "PK20 Concentrations (ug/L)",
                xticks = 0:20:160, yscale = log10))
axislegend(a) 
f 
```

```julia; echo=false, eval=false
par1 = (tvkm    = 261.736,
        tvvmax  = 36175.1,
        tvvc    = 48.9892,
        Ω       = Diagonal([0.09,0.04,0.0225]),
        σ²_prop = 0.0927233)

par2 = (tvkm    = 751.33,
        tvvmax  = 36175.1,
        tvvc    = 48.9892,
        Ω       = Diagonal([0.04,0.09,0.0225]),
        σ²_prop = 0.0628022)

## Subject 1
ev1  = DosageRegimen(25000, time=0, cmt=1)
pop1 = map(i -> Subject(id=i, events=ev1), 1:45)

Random.seed!(1234)
sim_pop1 = simobs(pk_20, pop1, par1, obstimes=[0.08,0.25,0.5,0.75,1,1.5,2])
plot(sim_pop1, yaxis=:log)

df1_pop = DataFrame(sim_pop1)

## Subject 2
ev2  = DosageRegimen(100000, time=0, cmt=1)
pop2 = map(i -> Subject(id=1, events=ev2), 1:45)

Random.seed!(1234)
sim_pop2 = simobs(pk_20, pop2, par2, obstimes=[0.08,0.25,0.5,0.75,1,1.5,2,4,6,8])
plot(sim_pop2, yaxis=:log)

df2_pop = DataFrame(sim_pop2)

df_sim = vcat(df1_pop, df2_pop)

CSV.write("./data/generated/pk_20.csv", df_sim)
```
