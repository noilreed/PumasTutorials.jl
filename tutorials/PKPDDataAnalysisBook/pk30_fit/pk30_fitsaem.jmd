---
title: Exercise PK30 - Turnover I - Fitting SC - Dosing of hormone
date: `j Date(now())`
---

```julia; echo = false
using Dates
```

## Objectives

In this exercise we will learn about the **turnover models**. In this exercise there
 is an endogenous synthesis of the drug and hence there are initial concentrations
 of the drug that need to be considered while modeling. Thus we will include a
 zero-order constant synthesis of the drug in the body along with actual administration
 of the drug. We will continue to refine and analyze the outputs to get the best
 model to fit the data. We will compare the models based on the `diagnostic plots`
 and `statistics`.

The basic workflow for the estimation process is:

 1. Description of the data
 2. Exploratory analysis of the data
 3. NCA Analysis
 4. Pharmacokinetic modelling
 5. Diagnostic Plots
 6. Validation

Lets load the necessary `libraries` before we get started

```julia
using PumasTutorials
using Random
using CSV
using PumasPlots
using Plots
using StatsPlots
using Pipe
using StatsBase
using PrettyTables
```

## Description of the data

The drug (hormone) is given subcutaneously at a dose of **40 μg/kg once**. It is to be noted
 that there is endogenous production of the drug and we have captured the initial
 concentration of the drug at `time=0`. PK samples are collected at time `0, 2, 3,
 4, 5, 6, 8, 10, 15, 24, 32, 48, 72 hrs`.

The following are the units of the dataset:

 * Time (time) = hrs
 * Plasma Concentrations (dv) = μg/L
 * Dose (amt) = μg/kg

```julia
pk30_data_df = CSV.read("./pk_30.csv", DataFrame, missingstrings = ["", ".", "NA", "BQL"])
```

Basic summary `statistics` of the data

```julia
stats_pk30_data = describe(pk30_data_df, :min, :max, :mean, :std, :nmissing, cols=[:id,:time,:dv])
```

## Exploratory Plots of the given data

 * Plot of Plasma Concentration vs Time

```julia
pk_data_plot = dropmissing(pk30_data_df, :dv)
@df pk_data_plot plot(:time, :dv, group=:id, label=false,
                      xlabel="Time (hr)", ylabel="Concentration (ug/L)",
                      guidefontsize = 12, size = (600, 600),
                      title = "Concentrations vs Time")
```

## NCA Analysis

We will now perform an NCA Analysis to get initial estimates of the data for the
 fitting of the given data. We will include a route column to specify that dosing
 is extravascular `ev`. The **read_nca()** function input requires the route to be
 stated as `ev` for an extravascular, this will help to compute the parameters correctly.

```julia; results="hidden"
pk30_data_df[:, :route] .= "ev"
```

Now, map the data variables to the *read_nca* function that prepares the data for
 NCA analysis. You can even type **?read_nca** in the REPL and get more information
 on the mapping of the data.

```julia
transform!(groupby(pk30_data_df, :id), :dv => (x -> x .- x[2]) => :dv_nca)

pk30_nca = read_nca(pk30_data_df,
                    id       = :id,
                    time     = :time,
                    amt      = :amt,
                    conc     = :dv_nca,
                    route    = :route)
```

A full NCAReport is generated, we will then perform summary statistics of the
 required parameters to obtain the **Mean, GeometricMean, and SD**

```julia
pk30_nca_report = NCAReport(pk30_nca, sigdig=3)
```

Perform the Summary `Statistics` for the required NCA Parameters

```julia
## Select the required parameters from the NCA Report
dropmissing!(pk30_nca_report)
stats_nca_plasma_df = select(pk30_nca_report, [:id, :vz_f_obs, :cl_f_obs, :kel, :half_life, :aucinf_obs, :tmax])

## Stack the data for easy computation
stats_nca_plasma_stacked = stack(stats_nca_plasma_df, [:vz_f_obs, :cl_f_obs, :kel, :half_life, :aucinf_obs, :tmax], [:id])
stats_nca_plasma_summary = combine(groupby(stats_nca_plasma_stacked,[:variable]),
                            [col => fun for col in [:value]
                            for fun in [mean, geomean, std]])
```

We will take the mean of the baseline concentration for calculation of _Synthesis_.

```julia
stats_time_plasma_summary = combine(groupby(pk30_data_df,[:time, :evid]),
                            [col => fun for col in [:dv]
                            for fun in [mean, std]])
stats_time_plasma_summary[2,:]
```

We can obtain the Ka value from the equation (0.693/(_tmax_/4)), i.e **Ka = 1.02 hr⁻¹**.
 The Synthesis value from Average Baseline Conc (C0) = Synthesis / Cl, i.e **Synthesis = 0.58 ug/hr**


## Pharmacokinetic Modelling

##### Read the dataset into read_pumas()

```julia
pk_data      = read_pumas(pk30_data_df,
                          id           = :id,
                          time         = :time,
                          observations = [:dv],
                          amt          = :amt,
                          evid         = :evid,
                          cmt          = :cmt)
```

##### One-Compartment Absorption Model with Intial Synthesis - Proprtional Error Model

This is a one-compartment absorption model with initial baseline concentrations
 due to synthesis within the body at a constant rate. Thus we will build a model
 with **endogenous synthesis** at a `constant rate` in the body.

* Proportional Error Model

```julia
pk_30_prop      = @emmodel begin
  @metadata begin
    desc        = "PK30 Endogenous Synthesis Model - Prop Error"
    timeu       = u"hr"
  end 

  @random begin
    "Abosprtion Rate Constant (1/hr)"
    Ka          ~ 1 | LogNormal
    "Clearance (L/hr)"
    Cl          ~ 1 | LogNormal
    "Turnover Rate (1/hr)"
    Synthesis   ~ 1 | LogNormal
    "Volume (L)"
    Vc          ~ 1 | LogNormal
  end

  @init begin
    Central     = Synthesis/(Cl/Vc) # Concentration at Baseline = Turnover Rate / Cl of hormone
  end

  @dynamics begin
    Depot'      = - Ka * Depot
    Central'    =   Ka * Depot + Synthesis - (Cl/Vc) * Central
  end

  @post begin
    cp          = Central/Vc
  end

  @error begin
    dv          ~ ProportionalNormal(cp)
  end
end
```

We will use the `initial estimates` we have obtained from the NCA Analysis and other
 derived values.

```julia
param_est_prop = ( Ka         = 1.01,
                   Cl         = 0.02,
                   Synthesis  = 0.58,
                   Vc         = 0.2)
```

##### SAEM Fitting

Our estimates from the NaivePooled Analysis close to the initial estimates obtained
 from the NCA analysis. We will fit the data using `SAEM`.

```julia
pk_30_prop_fit = @time fit(pk_30_prop, pk_data, param_est_prop,
                      Pumas.SAEM(), ensemblealg=EnsembleThreads())

coeftable(pk_30_prop_fit)
```


##### One-Compartment Absorption Model with Intial Synthesis - Additive Error Model

```julia
pk_30_add      = @emmodel begin
  @metadata begin
    desc        = "PK30 Endogenous Synthesis Model - Additive Error"
    timeu       = u"hr"
  end 

  @random begin
    "Abosprtion Rate Constant (1/hr)"
    Ka          ~ 1 | LogNormal
    "Clearance (L/hr)"
    Cl          ~ 1 | LogNormal
    "Turnover Rate (1/hr)"
    Synthesis   ~ 1 | LogNormal
    "Volume (L)"
    Vc          ~ 1 | LogNormal
  end

  @init begin
    Central     = Synthesis/(Cl/Vc) # Concentration at Baseline = Turnover Rate / Cl of hormone
  end

  @dynamics begin
    Depot'      = - Ka * Depot
    Central'    =   Ka * Depot + Synthesis - (Cl/Vc) * Central
  end

  @post begin
    cp          = Central/Vc
  end

  @error begin
    dv          ~ Normal(cp)
  end
end
```

We will use the `initial estimates` we have obtained from the NCA Analysis and other
 derived values.

```julia
param_est_add  = ( Ka         = 1.01,
                   Cl         = 0.1,
                   Synthesis  = 0.7,
                   Vc         = 0.3)
```

We will fit the data using the `SAEM` Method

```julia
pk_30_add_fit = @time fit(pk_30_add, pk_data, param_est_add,
                      Pumas.SAEM(), ensemblealg=EnsembleThreads())

coeftable(pk_30_add_fit)
```