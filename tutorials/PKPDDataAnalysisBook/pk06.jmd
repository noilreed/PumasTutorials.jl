---
title:  Exercise PK06 - One Compartment Intravenous Plasma/Urine II
date: `j Date(now())`
---

```julia; echo = false
using Dates
```

### Background

  * Structural model        - One compartment linear elimination with first order absorption
  * Route of administration - Oral and IV given simulataneously
  * Dosage Regimen          - 100 mg IV and 100 mg Oral
  * Number of Subjects      - 1

![PK06 Graphic Model](https://user-images.githubusercontent.com/62241298/78966466-9c9ca100-7b1d-11ea-89d3-3dc9262540c4.png)

### Objective

In this tutorial, you will learn to build one compartment model and to simulate
 the model for different subjects and dosage regimens.

### Libraries

call the "necessary" libraries to get started

```julia
using Pumas
using Plots
using CSV
using StatsPlots
using Random
```
### Model

In this one compartment model, we administer dose both oral and iv at two different occasions.

```julia
pk_06        = @model begin
  @param begin
    tvcl     ∈ RealDomain(lower=0)
    tvvc     ∈ RealDomain(lower=0)
    tvfe     ∈ RealDomain(lower=0)
    tvka     ∈ RealDomain(lower=0)
    tvlag    ∈ RealDomain(lower=0)
    tvF      ∈ RealDomain(lower=0)
    Ω        ∈ PDiagDomain(6)
    σ²_prop  ∈ RealDomain(lower=0)
    σ_add    ∈ RealDomain(lower=0)
  end

  @random begin
    η        ~ MvNormal(Ω)
  end

  @pre begin
    Cl       = tvcl * exp(η[1])
    Vc       = tvvc * exp(η[2])
    Ka       = tvka * exp(η[3])
    fe       = tvfe * exp(η[4])
    lags     = (Depot = tvlag * exp(η[5]),)
    bioav    = (Depot = tvF * exp(η[6]),)
  end

  @dynamics begin
    Depot'   = -Ka*Depot
    Central' =  Ka*Depot - (Cl/Vc)*Central
    Urine'   =  fe*(Cl/Vc)*Central
  end

  @derived begin
    cp       = @. (Central/Vc)
    dv       ~ @. Normal(cp, sqrt(cp^2*σ²_prop))
    ae       = @. Urine
    dv_ae    ~ @. Normal(ae, σ_add)
  end
end
```


### Parameters

Parameters provided for simulation. `tv` represents the typical value for parameters.

  * Cl - Clearance (L/hr)
  * Vc - Volume of Central Compartment (L)
  * Fe - Fraction of drug excreted in Urine
  * lag - lag time (hr)
  * Ka - Absorption rate constant (hr⁻¹)
  * F - Bioavailability
  * Ω - Between Subject Variability
  * σ - Residual error

```julia
param = ( tvcl    = 6.02527,
          tvvc    = 290.292,
          tvfe    = 0.0698294,
          tvka    = 0.420432,
          tvlag   = 0.311831,
          tvF     = 1.13591,
          Ω       = Diagonal([0.0,0.0,0.0,0.0,0.0,0.0]),
          σ²_prop = 0.015,
          σ_add   = 3)
```


### Dosage Regimen

##### For IV

A single subject receives an IV-bolus dose of **12.5 mg or 12500μg**

```julia
ev1  = DosageRegimen(12500, time=0, cmt=2)
sub1 = Subject(id=1, events=ev1)
```

##### For Oral

A single subject receives an oral dose of **25 mg or 25000μg**

```julia
ev2  = DosageRegimen(25000, time=0, cmt=1)
sub2 = Subject(id=2,events=ev2)
```

### Simulation

Here, we will learn how to simulataneously simulate plasma conc and urine
 amount after IV and Oral administration.

##### For IV

Lets simulate for plasma concentration and amount excreted unchanged in urine.

```julia; results="hidden"
Random.seed!(123)
sim_sub1_iv = simobs(pk_06, sub1, param, obstimes=0.1:0.1:168)
df_sim_iv   = DataFrame(sim_sub1_iv)
```

##### For Oral

Lets simulate the plasma concentration and amount excreted unchanged in urine.

```julia; results="hidden"
Random.seed!(123)
sim_sub2_oral = simobs(pk_06, sub2, param, obstimes=0.1:0.1:168)
df_sim_oral   = DataFrame(sim_sub2_oral)
filter!(x -> x.time .> 0.2, df_sim_oral)
```

### Dataframe & Plot

Combined Plot of IV data and Oral data

```julia
df_iv_plasma   = filter(x -> x.time in [0.3, 0.6, 1, 2, 3, 4, 6, 8, 24, 48, 72, 96, 168], df_sim_iv)
df_iv_urine    = filter(x -> x.time in [24,48], df_sim_iv)
df_oral_plasma = filter(x -> x.time in [0.3, 0.6, 1, 2, 3, 4, 6, 8, 24, 48, 72, 96, 168], df_sim_oral)
df_oral_urine  = filter(x -> x.time in [24,48], df_sim_oral)


@df df_sim_iv plot(:time,:cp, yaxis=:log,
                    title="Plasma Drug Conc. & Amt Excreted in Urine",label="Pred - Conc IV",
                    xlabel="Time (hr)", ylabel="Conc. (ug/L) & Amount (ug)", linewidth=3,
                    xticks=[0,20,40,60,80,100,120,140,160,180], ylims=(1,2000))
@df df_iv_plasma scatter!(:time, :dv, label="Obs - Conc IV")
@df df_iv_urine plot!(:time, :ae, label="Pred - Amt IV", linewidth=3)
@df df_iv_urine scatter!(:time, :dv_ae, label="Obs - Amt IV")
@df df_sim_oral plot!(:time,:cp, yaxis=:log, label="Pred - Conc Oral", linewidth=3)
@df df_oral_plasma scatter!(:time, :dv, label="Obs - Conc Oral")
@df df_oral_urine plot!(:time, :ae, label="Pred - Amt Oral", linewidth=3)
@df df_oral_urine scatter!(:time, :dv_ae, label="Obs - Amt Oral", linewidth=3)
```

```julia; echo=false, eval=false
par = ( tvcl    = 6.02527,
        tvvc    = 290.292,
        tvfe    = 0.0698294,
        tvka    = 0.420432,
        tvlag   = 0.311831,
        tvF     = 1.13591,
        Ω       = Diagonal([0.225,0.0125,0.09,0.04,0.032,0.065]),
        σ²_prop = 0.015,
        σ_add   = 5)


ev1    = DosageRegimen(12500, time=0, cmt=2)
pop_iv = map(i -> Subject(id=i, events=ev1), 1:65)

ev2  = DosageRegimen(25000, time=0, cmt=1)
pop_oral = map(i -> Subject(id=i, events=ev2), 1:65)

## IV
Random.seed!(1234)
sim_pop_iv = simobs(pk_06, pop_iv, par, obstimes=[0.3,0.6,1,2,3,4,6,8,24,48,72,96,168])
plot(sim_pop_iv)

#Split data of Plasma and Urine, Merge seperately after naming the sample
df_sim_pop_iv = DataFrame(sim_pop_iv)
iv_urine = filter(x -> x.time in [24,48], df_sim_pop_iv)
df_sim_pop_iv[!, :sample] .= "IV-Plasma"
iv_urine[!, :sample] .= "IV-Urine"
df_iv = outerjoin(df_sim_pop_iv,iv_urine, on =[:id,:time,:cp, :dv, :ae, :dv_ae, :amt, :evid, :cmt, :rate, :sample])


## Oral
Random.seed!(1234)
sim_pop_oral = simobs(pk_06, pop_oral, par, obstimes=[0.3,0.6,1,2,3,4,6,8,24,48,72,96,168])
plot(sim_pop_oral)

#Split data of Plasma and Urine, Merge seperately after naming the sample
df_sim_pop_oral = DataFrame(sim_pop_oral)
oral_urine = filter(x -> x.time in [24,48], df_sim_pop_oral)
df_sim_pop_oral[!, :sample] .= "Oral-Plasma"
oral_urine[!, :sample] .= "Oral-Urine"
df_oral = outerjoin(df_sim_pop_oral,oral_urine, on =[:id,:time,:cp, :dv, :ae, :dv_ae, :amt, :evid, :cmt, :rate, :sample])

## Final join
df_sim = outerjoin(df_iv,df_oral, on=[:id,:time,:cp,:dv,:ae,:dv_ae,:amt,:evid,:cmt,:rate,:sample])

CSV.write("./data/pharma_data/pk_06.csv", df_sim)
```
