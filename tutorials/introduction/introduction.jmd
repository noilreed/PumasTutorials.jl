---
title: A comprehensive introduction to Pumas - Part 1
date: `j Date(now())`
---

```julia; echo = false
using Dates
```

# Introduction

This tutorial provides a comprehensive introduction to a modeling and simulation workflow
in Pumas. This tutorial will not get into the details of Pumas specifics, but instead provide
a narrative on the lines of a regular workflow in our day to day work, with brevity where required
to allow a broad overview. Wherever possible, cross-references will be provided to documentation
and detailed examples that provide deeper insght into a particular topic.

As part of this workflow you will be introduced to various aspects such as

1. Data wrangling in Julia
2. Exploratory analysis in Julia
3. Continous and discrete data non-linear mixed effects modeling in Pumas
4. Model comparison routines, post-processing, validation etc.

## The study and design

CTMNopain is a novel anti-inflammatory agent under preliminary investigation.
A dose-ranging trial was conducted comparing placebo with 3 doses of CTMNopain
(5mg, 20mg and 80 mg QD).  The maximum tolerated dose is 160 mg per day.
Plasma concentrations (mg/L) of the drug were measured at 0, 0.5, 1, 1.5, 2, 2.5, 3-8 hours.

Pain score (0=no pain, 1=mild, 2=moderate, 3=severe) were obtained at time points
when plasma concentration was collected.  A pain score of 2 or more is considered
as no pain relief.

The subjects can request for remedication if pain relief is not achieved after 2 hours post dose.
Some subjects had remedication before 2 hours if they were not able to bear the pain.
The time to remedication and the remedication status is available for subjects.

## The goal

We are expected to provide input for an optimal dose/dosing regimen to be carried
forward in future trials. Two datasets are provided below, that can be downloaded using the
links below.

1. [pk_painscore.csv](https://github.com/PumasAI/PumasTutorials.jl/blob/master/data/intro/pk_painscore.csv)
2. [pain_remedication.csv](https://github.com/PumasAI/PumasTutorials.jl/blob/master/data/intro/pain_remedication.csv)

```julia
using PumasTutorials
using Random
using CSV
using Pumas
using PumasPlots
using Plots
using StatsPlots
using Pipe
using StatsBase
using PrettyTables
```

### Data Wrangling

We start by reading in the two dataset and making some quick summaries.

Note: As a general convention during this example, I will refer to dataframes by ending
the name of the variable with _df_ and the `Population` version of that dataframe will
be without the _df_ to avoid confusion.

```julia; results = "hidden"
pkpain_df = DataFrame(CSV.File(joinpath(dirname(pathof(PumasTutorials)), "..", "data", "intro", "pk_painscore.csv"), missingstrings=["", "NA", "."]))
remed_df  = DataFrame(CSV.File(joinpath(dirname(pathof(PumasTutorials)), "..", "data", "intro", "pain_remedication.csv"), missingstrings=["", "NA", "."]))
```

Let's filter out the placebo data as we don't need that for the PK analysis.

```julia
pkpain_noplb_df = filter(x -> !(occursin.("Placebo", x.ARM)), pkpain_df)
pretty_table(first(pkpain_noplb_df,10), backend = :html;
            formatters = ft_round(3))
```

do some data wrangling and plotting here

### Non-compartmental analysis

Let's begin by peforming a quick NCA of the concentration time profiles and view the exposure
changes across doses. The input data specicfication for NCA analysis () requires the presence of
a `route` column and an amount column that specifies the dose. So, let's add that in.

```julia; results = "hidden"
#adding route variable
pkpain_noplb_df[!,:route] .= "ev"
# creating an `amt` column
pkpain_noplb_df[!,:amt] .= ifelse.(pkpain_noplb_df.TIME .== 0, pkpain_noplb_df.DOSE, missing)
```

Now, we map the data variables to the `read_nca` function that prepares the data for NCA analysis.

```julia; results = "hidden"
pkpain_nca = read_nca(pkpain_noplb_df,
                      id = :ID,
                      time = :TIME,
                      amt = :amt,
                      conc = :CONC,
                      group = [:DOSE],
                      route = :route)
```

A full `NCAReport` is now obtained for completeness purposes, but later we will only extract a couple of key metrics
of interest.

```julia
pk_nca_report = NCAReport(pkpain_nca, sigdig=3)
pretty_table(first(pk_nca_report,10), backend = :html;
            formatters = ft_round(3))
```

As CTMNopain's effect maybe mainly related to maximum concentration (`cmax`) or area under the curve (`auc`),
we present some summary statistics.

```julia
auc_cmax = select(pk_nca_report, [:id, :DOSE, :cmax, :aucinf_obs])
#pivot data to allow easy computation
auc_cmax_stacked = stack(auc_cmax, [:cmax, :aucinf_obs], [:id, :DOSE])
auc_cmax_summary = combine(groupby(auc_cmax_stacked,[:DOSE,:variable]),
                           [col => fun for col in [:value]
                           for fun in [mean, median, geomean, std]])

pretty_table(auc_cmax_summary, backend = :html;
            formatters = ft_round(3, [3,4,5,6]))
```

```julia
#TODO unable to get ordered x-axis
auc_cmax[!,:Dose] .= CategoricalArray(auc_cmax.DOSE)
#levels!(auc_cmax[!,:Dose], ["5", "20", "80"])
@df auc_cmax groupedviolin(:DOSE, :cmax, group=:Dose,
                      marker=(0.2,:blue,stroke(0)))
@df auc_cmax groupedboxplot!(:DOSE, :cmax , group=:Dose, label="",
                      marker=(0.3,:orange,stroke(2)), alpha=0.75)
plot!(size = (600,600), xlabel = "Dose (mg)", ylabel = "Cmax")
```

Dose normalized PK parameters, `cmax` and `aucinf` were
essentially dose proportional between for 5 mg, 20 mg
and 80 mg doses. Based on visual inspection of the
concentration time profiles as seen below, CTMNopain exhibited monophasic decline, and perhaps
a one compartment model best fits the PK data.

```julia
pkpain_noplb_plot_df = filter(x -> !(x.TIME .== 0), pkpain_noplb_df)
@df pkpain_noplb_plot_df plot(:TIME, :CONC,
                        color=:DOSE, group=:ID, legend=false,
                        yaxis =:log, alpha=0.2)

@df pkpain_noplb_plot_df plot!(:TIME, :CONC,
                        group=:DOSE, legend=false, linewidth = 5,
                        yaxis =:log, seriestype = :Loess,
                        xlabel = "Time (hours)", ylabel = "Concentration (ng/mL)",
                        size = (800, 800), guidefontsize = 22,
                        tickfontsize =14)
```

### Pharmacokinetic modeling

As seen from the plot above, the concentrations decline monoexponentially.
We will evaluate both one and two compartment structural models to assess best fit.
Further, different residual error models will also be tested.

We will use the results from NCA to provide us good initial estimates.
The mean clearance is `j round(mean(pk_nca_report.cl_f_obs),digits=2)`, the mean volume is
`j round(mean(pk_nca_report.vz_f_obs),digits=2)` and a good initial estimate for absorption rate
as obtained by $0.693/(tmax/4)$ is `j round(0.693/(mean(pk_nca_report.tmax)/4), digits=2)`

#### Data preparation for modeling

[PumasNDF]() requires the presence of `evid` and `cmt` columns in the dataset.

```julia; results = "hidden"
pkpain_noplb_df[!, :evid] .= ifelse.(pkpain_noplb_df.TIME .== 0, 1, 0)
pkpain_noplb_df[!, :cmt] .= ifelse.(pkpain_noplb_df.TIME .== 0, 1, 2)
pkpain_noplb_df[!, :cmt2] .= 1 # for zero order absorption
```

Further, observations at time of dosing, i.e., when `evid = 1` have to be `missing`

```julia; results = "hidden"
pkpain_noplb_df[!, :CONC] .= ifelse.(pkpain_noplb_df.evid .== 1, missing, pkpain_noplb_df.CONC)
```

The dataframe is now converted to a [`Population`]() using [`read_pumas`](). Note that
both `observations` and `covariates` are required to be an array even if it is one element.

```julia; results = "hidden"
pkpain_noplb = read_pumas(pkpain_noplb_df,
                          id           = :ID,
                          time         = :TIME,
                          amt          = :amt,
                          observations = [:CONC],
                          covariates   = [:DOSE],
                          evid         = :evid,
                          cmt          = :cmt)
```

Now that the data is transformed to a `Population` of subjects, we can explore different models.

#### One-compartment model

```julia
pk_1cmp = @model begin
  @param begin
    tvcl ∈ RealDomain(lower = 0, init = 3.2)
    tvv  ∈ RealDomain(lower = 0, init = 16.4)
    tvka ∈ RealDomain(lower = 0, init = 3.8)
    Ω    ∈ PDiagDomain(init = [0.04,0.04,0.04])
    σ_p  ∈ RealDomain(lower = 0.0001, init = 0.2)
  end
  @random begin
    η ~ MvNormal(Ω)
  end
  @covariates DOSE
  @pre begin
    CL = tvcl * exp(η[1])
    Vc = tvv * exp(η[2])
    Ka = tvka * exp(η[3])
  end
  @dynamics Depots1Central1
  @derived begin
    cp := @. Central/Vc
    CONC ~ @. Normal(cp, cp*σ_p)
  end
end
```
Before going to fit the model, let's evaluate some helpful steps.

1. Simulation to check appropriatness of data and model

```julia
simpk = simobs(pk_1cmp, pkpain_noplb, init_param(pk_1cmp))
plot(simpk, xlabel = "Time (hours)", ylabel = "Concentration (ng/mL)",
    size = (800, 800), guidefontsize = 22, label = "Simulated profiles",
    tickfontsize =14, alpha=0.1, yaxis = :log)
#
@df pkpain_noplb_plot_df scatter!(:TIME, :CONC,
                        color=:DOSE, group=:ID, legend=false,
                        alpha=0.5, yaxis = :log, label = "Observed concentrations")
```

Our NCA based initial guess on the parameters seem to work well.

Lets change the initial estimate of a couple of the parameters to evaluate the senstitivty.

```julia
pkparam = (init_param(pk_1cmp)..., tvka=2, tvv = 10)
```

```julia
simpk = simobs(pk_1cmp,
               pkpain_noplb,
               pkparam)
plot(simpk, xlabel = "Time (hours)", ylabel = "Concentration (ng/mL)",
    size = (800, 800), guidefontsize = 22,
    tickfontsize =14, alpha=0.1, yaxis = :log)
#
@df pkpain_noplb_plot_df scatter!(:TIME, :CONC,
                        color=:DOSE, group=:ID, legend=false,
                        alpha=0.5, yaxis = :log)
```

Changing the `tvka` and decreasing the `tvv`  seemed to make an impact and observations go
through the simulated lines.

There are two other ways to get a quick ballpark estimate of your PK parameters:
NaivePooled analysis and Two-Stage Approach. Both these approaches are quite easy to perform
without changing the model or the dataset. Below we test the `NaivePooled` approach

##### NaivePooled

```julia; results = "hidden"
pkfit_np = fit(pk_1cmp,
               pkpain_noplb,
               init_param(pk_1cmp),Pumas.NaivePooled(),
               omegas = (:Ω,))
```


```julia
pretty_table(coeftable(pkfit_np), backend = :html, formatters = ft_round(2,[2]))
```

The final estimates from the NaivePooled approach seem reasonably close to our initial
guess from NCA, except for the `tvka` parameter. We will stick with our initial guess

One way to be cautious before going into a complete `fit`ing routine is to evaluate
the likelihood of the individual subjects given the initial parameter values
and see if anyone pops out as unreasonable.
There are a few ways of doing this that will be introduce later, but here we will be
checking the `loglikelihood` subject wise.

Below, we are basically checking if the initial estimates for any subject are way off
that we are unable to compute the initial `loglikelihood`.

```julia
lls = []
for subj in pkpain_noplb
  #println("ID: " , subj.id)
  push!(lls,loglikelihood(pk_1cmp,
                   subj,
                   pkparam,
                   Pumas.FOCEI()))
end
histogram(lls, size = (800,800))
```

The distribution of the loglikelihood's suggest no extreme outliers.

Now that we have a good handle on our data, lets go ahead and `fit` a population model

```julia; results = "hidden"
pkfit_1cmp = fit(pk_1cmp,
                 pkpain_noplb,
                 pkparam,
                 Pumas.FOCEI(), ensemblealg = EnsembleThreads(),
                 constantcoef = (tvka = 2,))
```

```julia
pretty_table(coeftable(pkfit_1cmp),backend = :html,  formatters = ft_round(2,[2]))
```

Notice that I fixed the `tvka` to 2 as I we don't have a lot of information before `tmax`.
From the table below, we see that the parameter precision for this model is reasonable.

```julia
pretty_table(coeftable(infer(pkfit_1cmp)), backend = :html, formatters = ft_round(2,[2,3,4,5]))
```

Just to be sure, let's fit a 2-compartment model and evaluate

```julia
pk_2cmp = @model begin
  @param begin
    tvcl ∈ RealDomain(lower = 0, init = 3.2)
    tvv  ∈ RealDomain(lower = 0, init = 16.4)
    tvvp ∈ RealDomain(lower = 0, init = 10)
    tvq  ∈ RealDomain(lower = 0, init = 2)
    tvka ∈ RealDomain(lower = 0, init = 1.3)
    Ω    ∈ PDiagDomain(init = [0.04,0.04,0.04, 0.04, 0.04])
    σ_p  ∈ RealDomain(lower = 0.0001, init = 0.2)
  end
  @random begin
    η ~ MvNormal(Ω)
  end
  @covariates DOSE
  @pre begin
    CL = tvcl * exp(η[1])
    Vc = tvv * exp(η[2])
    Ka = tvka * exp(η[3])
    Vp = tvvp * exp(η[4])
    Q = tvq * exp(η[5])
  end
  @dynamics Depots1Central1Periph1
  @derived begin
    cp := @. Central/Vc
    CONC ~ @. Normal(cp, cp*σ_p)
  end
end
```

```julia; results = "hidden"
pkfit_2cmp = fit(pk_2cmp,
                 pkpain_noplb,
                 init_param(pk_2cmp),
                 Pumas.FOCEI(), ensemblealg = EnsembleThreads(),
                 constantcoef = (tvka = 2,))
```

```julia
pretty_table(coeftable(infer(pkfit_2cmp)), backend = :html, formatters = ft_round(2,[2,3,4,5]))
```
The 2 compartment model has a much lower objective function compared to the 1 compartment. Lets compare
the estimates from the 2 models.

```julia
@pipe leftjoin(coeftable(pkfit_2cmp),
               coeftable(pkfit_1cmp), on = :parameter, makeunique = true) |>
  rename!(_, :estimate => :pk2cmp, :estimate_1 => :pk1cmp) |>
  pretty_table(_, backend = :html, formatters = ft_round(2,[2,3]))
```

We perform a likelihood ratio test to compare the two nested models. The test statistic
and the P-value clearly indicate that a 2 compartment model is better.

```julia
lrtest(pkfit_1cmp, pkfit_2cmp)
```

We should also compare the other metrics and statistics, such `ηshrinkage`, `ϵshrinkage`,
`aic`, `bic`

```julia
DataFrame([(metric=string(f), fit_1cmp=f(pkfit_1cmp), fit_2cmp=f(pkfit_2cmp)) for f in (aic, bic, ϵshrinkage, ηshrinkage)])
```

We next generate some goodness of fit plots to compare which model is performing better.
To do this, we first `inspect` the diagnostics of our model fit.

```julia
res_inspect_1cmp = DataFrame(inspect(pkfit_1cmp))
dropmissing!(res_inspect_1cmp)
pretty_table(first(res_inspect_1cmp, 10), backend = :html, formatters = ft_round(2,[4,5,6,7,8,10,11,12,13,14]))
```

```julia
res_inspect_2cmp = DataFrame(inspect(pkfit_2cmp))
dropmissing!(res_inspect_2cmp)
pretty_table(first(res_inspect_2cmp, 10), backend = :html, formatters = ft_round(2,[4,5,6,7,8,10,11,12,13,14]))
```
Let's make some plots.
_Note: These are WIP packages that will be improved over time._

```julia
theme(:wong2)
```

```julia
function gof(res_inspect)
  p1 = plot()
  @df res_inspect scatter!(
      p1,
      :CONC_pred, :CONC;
      ylabel = "Observed CTM-Nopain (ng/mL)",
      xlabel = "Population Predicted CTM-Nopain (ng/mL)",
      label = "",
      legend=false,
  )
  Plots.abline!(p1,  1, 0; primary = false, linewidth=4)

  @df res_inspect plot!(
   p1,
   :CONC_pred, :CONC;
   seriestype = :Loess,
   linewidth=4
  )

  #
  p2 = plot()
  @df res_inspect scatter!(
      p2,
      :CONC_ipred, :CONC;
      ylabel = "Observed CTM-Nopain (ng/mL)",
      xlabel = "Individual Predicted CTM-Nopain (ng/mL)",
      label = "",
      legend=false,
  )
  Plots.abline!(p2, 1, 0; primary = false, linewidth=4)

  @df res_inspect plot!(
   p2,
   :CONC_ipred, :CONC;
   seriestype = :Loess,
   linewidth=4
  )

  #
  p3 = plot()
  @df res_inspect scatter!(
      p3,
      :time, :CONC_wres;
      xlabel = "Time (h)",
      ylabel = "Conditional Weighted Residuals",
       legend=false
  )
  Plots.abline!(p3, 0, 0; primary = false, linewidth=4)
  @df res_inspect plot!(
   p3,
   :time, :CONC_wres;
   seriestype = :Loess,
   linewidth=4
  )
  #
  p4 = plot()
  @df res_inspect scatter!(
      p4,
      :CONC_pred, :CONC_wres,
      xlabel = "Population Predicted CTM-Nopain (ng/mL))",
      ylabel = "Conditional Weighted Residuals",
      legend=false
  )
  Plots.abline!(p4, 0, 0; primary = false, linewidth=4)
  @df res_inspect plot!(
   p4,
   :CONC_pred, :CONC_wres;
   seriestype = :Loess,
   linewidth=4
  )

  return plot(p1,p2,p3,p4; size = (1000, 1000))
end
```

```julia
gof_1cmp = gof(res_inspect_1cmp)
```

```julia
gof_2cmp = gof(res_inspect_2cmp)
```

These plots clearly indicate that the 2 compartment model is a better fit
compared to the one compartment model. We can look at selected sample of individaul
plots.

```julia; results = "hidden"
function sample_df(df, nsamples)
    gdf = groupby(df, :id)
    sample_groups = sample(1:length(gdf), nsamples, replace=false)
    resampled = reduce(vcat, [gdf[i] for i in sample_groups])
    return resampled
end
Random.seed!(1234)
res_inspect_2cmp_sampled = sample_df(res_inspect_2cmp,12)
```

```julia
plot_grouped(
    groupby(res_inspect_2cmp_sampled, :id);
    # needs to be a large size for the plots to
    # be visible.  Try to maintain a square aspect
    # ratio.
    size = (2000, 2000),
    # we don't need a legend
    legend = :none,
    # link y axes together
    link = :y,
    # the figures should be laid out tightly
    margin = 0Plots.px,
    # these fontsizes are based on personal preference,
    # but should be fairly large, so that they can be
    # seen in PDFs.
    tickfontsize = 14,
    titlefontsize = 15
) do subdf
    @df subdf scatter(:time, :CONC, color=:black, markersize=8,
    xlabel = "Time (hours)", ylabel = "Concentration (ng\\/mL)" )
    @df subdf plot!(:time, :CONC_pred, color=:red, linewidth =4)
    @df subdf plot!(:time, :CONC_ipred, color=:blue, linewidth =4)
end
```

```julia
data4_etacov = select(res_inspect_2cmp,["η_1", "η_2", "η_3", "η_4", "η_5", "DOSE"])
data4_etacov = stack(data4_etacov, ["η_1", "η_2", "η_3", "η_4", "η_5"], "DOSE")
data4_etacov[!,:variable] .= string.(data4_etacov.variable)
@df data4_etacov groupedviolin(:variable,:value,
                              group = :DOSE, alpha =0.5)
@df data4_etacov groupedboxplot!(:variable,:value,
                              group = :DOSE, alpha =0.5, label ="")
Plots.abline!(0,0, linewidth=4, color = "black",
              size = (1000, 1000),
              xlabel = "η's", ylabel = "η_values", legendtitle = "Dose (mg)",
              guidefontsize = 22,
              tickfontsize =14, label ="")
```

Clearly,our guess at `tvka` seems off-target. Let's try and estimate `tvka` instead of fixing it to `2`


```julia; results = "hidden"
pkfit_2cmp_unfix_ka = fit(pk_2cmp,
                 pkpain_noplb,
                 init_param(pk_2cmp),
                 Pumas.FOCEI(), ensemblealg = EnsembleThreads())
```

```julia
pretty_table(coeftable(infer(pkfit_2cmp_unfix_ka)), backend = :html, formatters = ft_round(2,[2,3,4,5]))
```

```julia
@pipe leftjoin(coeftable(pkfit_2cmp),
               coeftable(pkfit_2cmp_unfix_ka), on = :parameter, makeunique = true) |>
  rename!(_, :estimate => :pk2cmp, :estimate_1 => :pk2cmp_unfix_ka) |>
  pretty_table(_, backend = :html, formatters = ft_round(2,[2,3]))
```

Let's revaluate the goodness of fits and η distribution plots.

Not much change in the general `gof` plots
```julia
res_inspect_2cmp_unfix_ka = DataFrame(inspect(pkfit_2cmp_unfix_ka))
gof(res_inspect_2cmp_unfix_ka)
```

But you can see a huge improvement in the `ηka` distribution which is now centered around zero
```julia
data4_etacov = select(res_inspect_2cmp_unfix_ka,["η_1", "η_2", "η_3", "η_4", "η_5", "DOSE"])
data4_etacov = stack(data4_etacov, ["η_1", "η_2", "η_3", "η_4", "η_5"], "DOSE")
data4_etacov[!,:variable] .= string.(data4_etacov.variable)
@df data4_etacov groupedviolin(:variable,:value,
                              group = :DOSE, alpha =0.5)
@df data4_etacov groupedboxplot!(:variable,:value,
                              group = :DOSE, alpha =0.5, label ="")
Plots.abline!(0,0, linewidth=4, color = "black",
              size = (1000, 1000),
              xlabel = "η's", ylabel = "η_values", legendtitle = "Dose (mg)",
              guidefontsize = 22,
              tickfontsize =14, label ="")
```

Finally looking at some individual plots

```julia
Random.seed!(1234)
res_inspect_2cmp_unfixka_sampled = sample_df(res_inspect_2cmp_unfix_ka,12)
plot_grouped(
    groupby(res_inspect_2cmp_unfixka_sampled, :id);
    # needs to be a large size for the plots to
    # be visible.  Try to maintain a square aspect
    # ratio.
    size = (2000, 2000),
    # we don't need a legend
    legend = :none,
    # link y axes together
    link = :y,
    # the figures should be laid out tightly
    margin = 0Plots.px,
    # these fontsizes are based on personal preference,
    # but should be fairly large, so that they can be
    # seen in PDFs.
    tickfontsize = 14,
    titlefontsize = 15
) do subdf
    @df subdf scatter(:time, :CONC, color=:black, markersize=8,
    xlabel = "Time (hours)", ylabel = "Concentration (ng\\/mL)" )
    @df subdf plot!(:time, :CONC_pred, color=:red, linewidth =4)
    @df subdf plot!(:time, :CONC_ipred, color=:blue, linewidth =4)
end
```

The randomly sampled individual fits don't seem good in some individuals, but we
can evaluate this via a `vpc` to see how to go about.

We can now perform a `vpc` to check.

```julia
pk_vpc = vpc(pkfit_2cmp_unfix_ka, 200; dv=:CONC,
             stratify_by = [:DOSE],
            ensemblealg=EnsembleThreads())
plot(pk_vpc,
    size=(1800,1800), xlabel="Time after dose (hours)",
    ylabel = "CTMNopain concentration (ng/mL)" ,
    titlefontsize=20,guidefontsize=20,
    markersize=10, markeralpha = 0.5, markercolor =:grey,
    observations = true,
    observed_quantiles = true,
    simquantile_medians = true,
    ci_bands = true,
    legend=true, legendfontsize = 20,
    titlefontcolor = :blue,
    linewidth =10,
     xtickfont = font(25),
     ytickfont = font(25))
```

The visual predictive check suggests that the model captures the data well across
all dose levels.
