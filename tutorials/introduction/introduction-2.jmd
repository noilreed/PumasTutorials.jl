---
title: A comprehensive introduction to Pumas - Part 2
date: `j Date(now())`
---

```julia; echo = false
using Dates
```

# Introduction

In [part-1]() of this tutorial, we modeled the pharmacokinetics of _CTMNopain_ an analgesic at three
dose levels. In this tutorial, we will explore the relation between drug exposures and pain scores.

Pain score (0=no pain, 1=mild, 2=moderate, 3=severe) were obtained at time points
when plasma concentration was collected.  A pain score of 2 or more is considered
as no pain relief.

The subjects requested for remedication if pain relief was not achieved after 2 hours post dose.
Some subjects had remedication before 2 hours if they were not able to bear the pain.
The time to remedication and the remedication status is available for subjects.

We will cover four different kinds of analysis in this tutorial:

1. Logistic regression of pain score
2. Ordinal regression of pain score
3. Time to remedication
4. Relation of _CTMNopain_ exposures to each of these end points. 

## Setup

### Load libraries

Two libraries provide the workhorse functionality in the Pumas ecosystem that we will load:

```julia; results = "hidden"
using Pumas
using PumasUtilities
using GLM: lm, @formula
using Random
using CSV
using HTTP
using Chain
using Latexify
using CairoMakie 
using StatsBase
using DataFrames
using ColorSchemes
using Survival
interactive!(false)
```

### Exploratory Analysis

Let's read the same data as in part-1 of the tutorial.

```julia; results = "hidden"
f = CSV.File(HTTP.get("http://bit.ly/painremed").body, 
             missingstrings=["", "NA", "."])

pkpain_df = DataFrame(f)
pkpain_df[!, :dosenum] .=  ifelse.(pkpain_df.Dose .== "Placebo",  0,
                           ifelse.(pkpain_df.Dose .== "5 mg", 5,
                           ifelse.(pkpain_df.Dose .== "20 mg", 20, 80)))
```

```julia
color_indices = groupindices(groupby(pkpain_df, [:Dose]))
palette = ColorSchemes.tab10.colors
f = Figure(resolution = (1000, 800))
ax = f[1,1] = Axis(f, 
                    xlabel="Time (hr)", 
                    ylabel="Proportion of Pain Relief", 
                    title = "Pain Score Trends for CTMNopain")
@chain pkpain_df begin
    combine(groupby(_, [:Time, :dosenum]), :PainRelief => mean, ungroup=true)
    for (i, gdf) in enumerate(groupby(_, [:dosenum], sort=true))
        barplot!(ax,
                gdf.Time, 
                gdf.PainRelief_mean, 
                dodge = unique(gdf.dosenum),
                color = (palette[i], 0.5)
            )
            ax.yticks = 0:0.1:1
    end
end
f
#    barplot!(ax, 
#			_[!,:dosenum], _[!,:PainRelief_mean],
#            color = _.Time)
f
```

```julia

```julia
color_indices = groupindices(groupby(pkpain_df, [:Dose]))
palette = ColorSchemes.tab10.colors
f = Figure(resolution = (1000, 800))
ax = f[1,1] = Axis(f, 
                    xlabel="Time (hr)", 
                    ylabel="Proportion of Pain Relief", 
                    title = "Pain Score Trends for CTMNopain")
@chain pkpain_df begin
    combine(groupby(_, [:Time, :dosenum]), :PainRelief => mean, ungroup=true)
    barplot!(ax,
            _.Time, 
            _.PainRelief_mean
            )
end
ax.yticks = 0:0.1:1
f
```

### Logistic regression of pain relief

```julia
binary_model = @model begin
    @metadata begin
        desc = "Logistic Regression Model"
    end
    @param begin
        "Intercept"
        intercept ∈ RealDomain(init=0.001)
        "Slope"
        tvslope ∈ RealDomain(init=0.0001)
        """
         - Ω
        """
        Ω ∈ VectorDomain(1)
    end

    @random begin
        η ~ MvNormal(Ω)
    end

    @covariates begin
        "Study Arm"
        arm 
        "Dose (mg)"
        dose
    end

    @pre begin
        rx = dose > 0 ? 1 : 0
        slope = tvslope*rx
        logit = intercept + slope + η[1]
    end

    @derived begin
        "Pain Relief"
        dv ~ @. Bernoulli(logistic(logit))
    end
end

param = (
    intercept = 0.001,
    tvslope = 0.0001,
    Ω = [1.0]
)
```