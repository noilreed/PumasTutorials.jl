---
title : Defining and Simulating Populations
date: `j Date(now())`
---

```julia; echo = false
using Dates
```

```julia; results = "hidden"
using Random
using Pumas
using PumasUtilities
interactive!(false)
```

# Introduction

In this tutorial, we will cover the fundamentals of generating populations
to simulate with Pumas. We will demonstrate how to specify dosage regimens and
covariates, and then how to piece these together to form a population to
simulate.

## The model

Below is a Pumas model that specifies a 1-compartment oral absorption system
with between-subject variability on all the parameters. Details of the model
specification are provided in the [documentation](https://docs.pumas.ai/stable/basics/models/).

```julia
model = @model begin
  @param begin
    θ ∈ VectorDomain(4)
    Ω ∈ PSDDomain(3)
    σ²_prop ∈ RealDomain(init=0.1)
  end

  @random begin
    η ~ MvNormal(Ω)
  end

  @covariates Wt

  @pre begin
    CL = θ[1]*(Wt/70)^0.75*exp(η[1])
    V = θ[2]*(Wt/70)^0.75*exp(η[2])
    Ka = θ[3]*exp(η[3])
  end

  @dynamics begin
    Depot'   = -Ka*Depot
    Central' =  Ka*Depot - Central*CL/V
  end

  @derived begin
    conc = @. Central/V
    dv ~ @.Normal(conc,sqrt(conc^2*σ²_prop))
  end

end
```

## Setting up parameters

Next we provide the initial estimates of the parameters to simulate from. The fixed effects are provided
in the θ vector (CL, V, Ka) and the between-subject variability parameteres are provided in the Ω vector as
variances. So, 0.04 variance on Ω_11 suggests a 20% coefficient of variation. Similarly, σ²_prop has a 20%
proportional residual error.

```julia
fixeffs = (
  θ = [0.4,20,1.1,2],
  Ω = diagm(0 => [0.04,0.04,0.04]),
  σ²_prop = 0.04
  )
```

## Single dose example

`DosageRegimen()` is the function that lets you construct a dosing regimen.
The first argument of the `DosageRegimen` is `amt` and is not a named argument.
All subsequent arguments need to be named. Lets try a simple example where you
provide a 100 mg dose at `time = 0`.

```julia
ev = DosageRegimen(100, time = 0)
first(ev.data)
```
As you can see above, we provided a single 100 mg dose. `DosageRegimen` provides some defaults when
it creates the dataset, `time = 0`, `evid = 1`, `cmt = 1`, `rate = 0`, `ii = 0` & `addl = 0`. 

Note that `ev` is of type `DosageRegimen`. Specified like above,
`DosageRegimen` is one of the four fundamental building block of a `Subject` (more on `Subject` below).

### Building Subjects

Let's create a single subject

```julia
s1 = Subject(id = 1,
            events = ev,
            covariates = (Wt = 70,),
            observations = (dv = nothing,))

```
Note that the `s1` `Subject` created above is composed of:

  - `id`: an unique identifier
  - `observations`: observations, represented by `Pumas.Observation`
  - `covariates`: covariates, represented by `Pumas.ConstantCovar`
  - `events`: events, represented by `Pumas.Event`

```julia
DataFrame(s1.events)
```
The events are presented by basic information such as the dose of drug, the time of dose administration,
the compartment number for administration and whether the dose is an instantaneous input or an infusion.

Below is how the covariates are represented, as a `NamedTuple`.

```julia
s1.covariates
```

(Note: defining distributions for covariates will be discussed in detail later.)

Using this one subject, `s1`, let us simulate a simple concentration time
profile using the model above:

```julia; results = "hidden"
Random.seed!(1234)
obs = simobs(model,
            s1,
            fixeffs,
            obstimes = 0:0.1:120)
```

and plot the result

```julia
sim_plot(model, 
         obs, observations = :conc)[1]
```

### Building Populations

Now, lets create one more subject, `s2`.

```julia
s2 = Subject(id = 2,
            events = ev,
            covariates = (Wt = 70,),
            observations = (dv = nothing,))
```

If we want to simulate both `s1` and `s2` together, we need to bring these subjects together to form a `Population`. A `Population` is
essentially a collection of subjects.

```julia
twosubjs =  [s1,s2]
```

Let's see the details of the first and the second subject

```julia
twosubjs[1]
```

```julia
twosubjs[2]
```
Now, we can simulate this `Population` of 2 subjects as below

```julia; results = "hidden"
Random.seed!(1234)
obs = simobs(model,
            twosubjs,
            fixeffs,
            obstimes = 0:0.1:120)
```

and plot the result

```julia
sim_plot(model, 
         obs, observations = :conc)[1]
```

Similarly, we can build a population of any number of subjects. But before we
do that, let's dive into covariate generation.

### Covariates

As was discussed earlier, a `Subject` can also be provided details regarding
covariates. In the model above, a continuous covariate body weight `Wt` impacts
both `CL` and `V`. Let us now specify covariates to a population of 10 subjects.

```julia
Random.seed!(1234)
choose_covariates() = (Wt = rand(55:80),)
```
`choose_covariates` will randomly choose a `Wt` between 55-80 kgs

We can make a list with covariates for ten subjects through a list comprehension

```julia
cvs = [ choose_covariates() for i in 1:10 ]
DataFrame(cvs)
```

Now, we add these covariates to the population as below. The `map(f,xs)` will
return the result of `f` on each element of `xs`. Let's map a function that
build's a subject with the randomly chosen covariates in order to build a
population:

```julia
pop_with_covariates = map(i -> Subject(id = i,
                                      events = ev,
                                      covariates = choose_covariates(),
                                      observations = (dv = nothing,)), 1:10)
```

Simulate into the population

```julia; results = "hidden"
Random.seed!(1234)
obs = simobs(model,
            pop_with_covariates,
            fixeffs,
            obstimes = 0:0.1:120)
```

and visualize the output

```julia
p = sim_plot(model, 
         obs, observations = :conc)
p[1]         
```

## Multiple dose example

`DosageRegimen` provides additional controls over the specification of the regimen. For example, `ii` defines the "interdose interval", or the
time difference between two doses, while `addl` defines how many additional times
to repeat a dose. Thus, let's define a dose of 100 that's repeated 7 times
at 24 hour intervals:

```julia
md =  DosageRegimen(100, ii = 24, addl = 6)
```

Let's create a new subject, `s3` with this dosage regimen:

```julia
s3 = Subject(id = 3,
             events = md, 
             covariates = (Wt = 70,),
             observations = (dv = nothing,))
```

and see the results:

```julia; results = "hidden"
Random.seed!(1234)
obs = simobs(model, 
            s3, fixeffs,
            obstimes = 0:0.1:240)
```

```julia
p = sim_plot(model, 
         obs, observations = :conc)
p[1]
```

## Combining dosage regimens

We can also combine dosage regimens to build a more complex regimen. Recall
from the introduction that using arrays will build the element-wise combinations.
Thus let's build a dose of 500 into compartment 1 at time 0, and 7 doses into
compartment 1 of 100 spaced by 24 hours:

```julia
ldmd = DosageRegimen([500,100],
                     time = [0,24], 
                     cmt = 1, 
                     addl = [0,6],
                     ii = [0,24])
```

Let's see if this result matches our intuition:

```julia;results = "hidden"
s4 = Subject(id = 4,
             events = ldmd, 
             covariates = (Wt = 70,), 
             observations = (dv = nothing,))
Random.seed!(1234)
obs = simobs(model, 
             s4, 
             fixeffs,
             obstimes = 0:0.1:120)
```

```julia
sim_plot(model, 
         obs, observations = :conc)[1]
```


Another way to build complex dosage regiments is to combine previously constructed
regimens into a single regimen. For example:

```julia;results = "hidden"
e1 = DosageRegimen(500,cmt = 1, time = 0, addl = 0, ii = 0)
e2 = DosageRegimen(100,cmt = 1, time = 24, addl = 6, ii = 24)
evs = DosageRegimen(e1,e2)
s5 = Subject(id = 5,
             events = evs, 
             covariates = (Wt = 70,), 
             observations = (dv = nothing,))
Random.seed!(1234)
obs = simobs(model, 
            s5, 
            fixeffs,
            obstimes = 0:0.1:120)
```

```julia
sim_plot(model, 
         obs, observations = :conc)[1]
```

is the same regimen as before.

Putting these ideas together, we can define a population where individuals
with different covariates undergo different regimens, and simulate them
all together:

```julia
e1 = DosageRegimen(100, ii = 24, addl = 6)
e2 = DosageRegimen(50,  ii = 12, addl = 13)
e3 = DosageRegimen(200, ii = 24, addl = 2)
```

```julia
pop1 = map(i -> Subject(id = i, events = e1, covariates = choose_covariates(),
                        observations = (dv = nothing,)), 1:5)
pop2 = map(i -> Subject(id = i, events = e2, covariates = choose_covariates(),
                        observations = (dv = nothing,)), 6:8)
pop3 = map(i -> Subject(id = i, events = e3, covariates = choose_covariates(),
                        observations = (dv = nothing,)), 9:10)
pop  = vcat(pop1, pop2, pop3)
```

```julia; results = "hidden"
Random.seed!(1234)
obs = simobs(model,
            pop,
            fixeffs,
            obstimes = 0:0.1:120)
```

```julia
p = sim_plot(model, 
         obs, observations = :conc)
p[1]         
```

## Defining Infusions

An infusion is a dosage which is defined
as having a non-zero positive rate at which the drug enters the system. Let's
define a single infusion dose of total amount 100 with a rate of 3 unit amount per time into the
second compartment:

```julia
inf = DosageRegimen(100, rate = 3, cmt = 2)
```

Now let's simulate a subject undergoing this treatment strategy:

```julia; results = "hidden"
s6 = Subject(id = 5, 
             events = inf, 
             covariates = (Wt = 70,),
             observations = (dv = nothing,))
Random.seed!(1234)
obs = simobs(model, 
            s6, 
            fixeffs, 
            obstimes = 0:0.1:120)
```

```julia
sim_plot(model, 
         obs, observations = :conc)[1]       
```

## Final Note on Julia Programming

Note that all of these functions are standard Julia functions, and thus standard
Julia programming constructions can be utilized to simplify the construction of
large populations. We already demonstrated the use of `map` and a comprehension,
but we can also make use of constructs like `for` loops.

## Conclusion

This tutorial shows the tools for generating populations of infinite complexity,
defining covariates and dosage regimens on the fly and simulating the results
of the model.
