---
title : Enterohepatic Recirculation
author : Parsshava R Mehta
date: 11th June 2020
---

Load the necessary libraries

```julia
using Pumas, PumasPlots, DataFrames, Random, PlottingUtilities, CairoMakie
```

## Introduction
In this tutorial you will learn how to write different ways of modeling the phsyiological process of enterohepatic recirculation

 * Double release of the bile at specified time points
 * Continous release of the bile

#### Single release of bile

 In this example we have a used a `Switch` to model the **on/off** release from the bile compartment.

**Note:** `t` is the solver time and when the following condition of time is met the switch gives a value of _1_ and other times it is _0_.

```julia
single_entero = @model begin
  @metadata begin
    timeu = u"hr"
  end

  @param begin
    tvvc      ∈ RealDomain(lower=0)
    tvcl      ∈ RealDomain(lower=0)
    tvq       ∈ RealDomain(lower=0)
    tvvp      ∈ RealDomain(lower=0)
    tvka      ∈ RealDomain(lower=0)
    tvk1g     ∈ RealDomain(lower=0)
    tvτ       ∈ RealDomain(lower=0)
    tvtfirst  ∈ RealDomain(lower=0)
    tvtsecond ∈ RealDomain(lower=0)
    Ω         ∈ PDiagDomain(2)
  end

  @random begin
    η         ~ MvNormal(Ω)
  end

  @pre begin
    Vc        = tvvc*exp(η[1])
    Cl        = tvcl*exp(η[2])
    Q         = tvq
    Vp        = tvvp
    Ka        = tvka
    K1g       = tvk1g
    τ         = tvτ
    Tfirst    = tvtfirst
    Tsecond   = tvtsecond
    Switch1   = (t>Tfirst && t<Tfirst+τ)*1
    Switch2   = (t>Tsecond && t<Tsecond+τ)*1
    Switch    = Switch1 + Switch2
  end

  @dynamics begin   # The release from the bile follows a zero-order process
    Central'    = Ka*Gut - (Cl/Vc)*Central - (Q/Vc)*Central + (Q/Vp)*Peripheral - K1g*Central
    Peripheral' = (Q/Vc)*Central - (Q/Vp)*Peripheral
    Bile'       = K1g*Central - (Bile/τ)*Switch
    Gut'        = (Bile/τ)*Switch - Ka*Gut
  end

  @derived begin
    "Plasma Concentration (mg/L)"
    cp     = @. Central/Vc
    "Switch"
    sw     = @. Switch
  end
end
```

Parameters are as mentioned below:

```julia
par1 = (tvvc     = 5,     # (L)
        tvcl     = 1,     # (L/hr)
        tvq      = 2,     # (L/hr)
        tvvp     = 20,    # (L)
        tvka     = 0.5,   # (hr⁻¹)
        tvk1g    = 0.25,  # (hr⁻¹)
        tvτ      = 2,     # (hr)
        tvtfirst = 4,     # (hr) Time of First release of bile
        tvtsecond=16,     # (hr) Time of Second release of bile
        Ω        = Diagonal([0.01,0.04]))
```

A single subject receives a dose of 500mg give as an IV-bolus at `time=0`

```julia; results="hidden"
sub1 = Subject( id=1,
                evs= DosageRegimen(500, time=0, cmt=:Central))
obs1 = simobs(single_entero, sub1, par1, obstimes=0:0.1:50)
```

Convert `obs1` to a Dataframe and plot the **Concentration vs Time**

```julia
#df  = DataFrame(obs1)
#@df df plot(:time, :cp, yaxis=:log, xlabel="Time (hr)", ylabel="Concentration (mg/l)", title="Concentration vs Time", label="Predicted Conc", linewidth=2, xticks=[0,10,20,30,40,50], xlims=(0,50))

interactive!(false)
p1 = sim_plot(single_entero,
              obs1, observations = :cp)[1]
Label(p1[0, :], "Concentration vs Time", textsize = 30)
p1
```

Plot **Switch vs Time**. In this you can see the release from the `Bile` compartment at the specified time points.

```julia
#@df df plot(:time, :sw, xlabel="Time (hr)", ylabel="Switch", label=false, linewidth=2, xticks=[0,10,20,30,40,50], xlims=(0,50))

interactive!(false)
p2 = sim_plot(single_entero,
              obs1, observations = :sw)[1]
Label(p2[0, :], "Switch vs Time", textsize = 30)
p2
```

#### Continous Release of the bile using the Cosine function

 In this example the bile is released continously at fixed intervals of the gall bladder emptying times using the cosine function.
 Rest of the time the switch remains _off_.

```julia
continous_entero = @model begin
  @metadata begin
    timeu = u"hr"
  end

  @param begin
    tvvc   ∈ RealDomain(lower=0)
    tvcl   ∈ RealDomain(lower=0)
    tvq    ∈ RealDomain(lower=0)
    tvvp   ∈ RealDomain(lower=0)
    tvka   ∈ RealDomain(lower=0)
    tvk1g  ∈ RealDomain(lower=0)
    tvτ    ∈ RealDomain(lower=0)
    Ω      ∈ PDiagDomain(2)
  end

  @random begin
    η      ~ MvNormal(Ω)
  end

  @pre begin
    Vc     = tvvc*exp(η[1])
    Cl     = tvcl*exp(η[2])
    Q      = tvq
    Vp     = tvvp
    Ka     = tvka
    K1g    = tvk1g
    τ      = tvτ
    Phase  = 6               # Time of beginning of the first gall bladder release
    Period = 20              # Frequency
    Switch = max(0, 1 * (cos(2*3.14*(t+Phase)/Period)))
  end

  @dynamics begin
    Central'    = Ka*Gut - (Cl/Vc)*Central - (Q/Vc)*Central + (Q/Vp)*Peripheral - K1g*Central
    Peripheral' = (Q/Vc)*Central - (Q/Vp)*Peripheral
    Bile'       = K1g*Central - (Bile/τ)*Switch
    Gut'        = (Bile/τ)*Switch - Ka*Gut
  end

  @derived begin
    "Plasma Concentration (mg/L)"
    cp     = @. Central/Vc
    "Switch"
    sw     = @. Switch
  end
end
```

Parameters are as mentioned below:

```julia
par1 = (tvvc  = 5,     # (L)
        tvcl  = 1,     # (L/hr)
        tvq   = 2,     # (L/hr)
        tvvp  = 20,    # (L)
        tvka  = 0.5,   # (hr⁻¹)
        tvk1g = 0.25,  # (hr⁻¹)
        tvτ   = 2,     # (hr)
        Ω     = Diagonal([0.01,0.04]))
```

A single subject receives a dose of 500mg as an IV-Bolus at `time=0`

```julia
sub1 = Subject(id=1, events=DosageRegimen(500, time=0, cmt=:Central))
obs1 = simobs(continous_entero, sub1, par1, obstimes=0:0.1:70)
```

Convert `obs1` to a Dataframe and plot the **Concentration vs Time**

```julia
#df1  = DataFrame(obs1)
#@df df1 plot(:time, :cp, yaxis=:log, xlabel="Time (hr)", ylabel="Concentration (mg/l)", label="Predcited Conc", linewidth=2, xticks=[0,10,20,30,40,50,60,70], xlims=(0,70))

interactive!(false)
p3 = sim_plot(continous_entero,
              obs1, observations = :cp)[1]
Label(p3[0, :], "Concentration vs Time", textsize = 30)
p3
```

Plot **Switch vs Time**. In this you can see the release from the `Bile` compartment at fixed intervals.

```julia
#@df df1 plot(:time, :sw, xlabel="Time (hr)", ylabel="Switch", label=false, linewidth=2, xticks=[0,10,20,30,40,50,60,70], xlims=(0,69))

interactive!(false)
p4 = sim_plot(continous_entero,
              obs1, observations = :sw)[1]
Label(p4[0, :], "Switch vs Time", textsize = 30)
p4
```
