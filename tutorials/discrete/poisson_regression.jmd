---
title: Poisson Regression Models
---

## Poisson Response Example

Next let's use a `Poisson` counting process in our model. Here we generate a
population where everyone is receiving the same doses as a covariate.

```julia
pop = Population(map(i -> Subject(id=i,cvs=(dose = i.*10,),time=[0.0]),1:10))
```

Now we define our model without dynamics, and directly use the dose information
to predict the count for some observable `dv`:

```julia
poisson_model = @model begin
  @param begin
    tvbase ∈ RealDomain(init=3.0, lower=0.1)
    d50 ∈ RealDomain(init=50, lower=0.1)
    Ω  ∈ PSDDomain(fill(0.1, 1, 1))
  end

  @random begin
    η ~ MvNormal(Ω)
  end

 @covariates dose

  @pre begin
    _dose = dose
    baseline = tvbase*exp(η[1])
  end

  @derived begin
    dv ~ @. Poisson(baseline*(1-_dose/(_dose + d50)))
  end
end
```

and simulate runs from the model:

```julia
sim = simobs(poisson_model,pop)
simdf = DataFrame(sim, include_events=false)
```

Here `dv` is an integer output probabilistically dependent on the dose.

Let's read the data back in to re-estimate the model parameters

```julia
poisson_pop = read_pumas(simdf, dvs=[:dv], cvs=[:dose], event_data=false)
```

```julia
poisson_res = fit(poisson_model,poisson_pop, init_param(poisson_model),Pumas.FOCE())
coeftable(poisson_res)
```
## Negative Binomial Example

Next let's use a `NegativeBinomial` counting process in our model. We will use an internal dataset
as an example.

```julia
pd_poisson = read_pumas(example_data("sim_poisson"), cvs = [:dose], event_data=false)
```

Now we define our model without dynamics, and directly use the dose information
to predict the count for some observable `dv`:

```julia
negativebinomial_model = @model begin
  @param begin
    θ₁ ∈ RealDomain(init=3.0, lower=0.1)
    θ₂ ∈ RealDomain(init=0.5, lower=0.1)
    ω  ∈ RealDomain(init=1.0, lower=0.0)
    θr  ∈ RealDomain(init=1.0, lower=0.0)
  end

  @random begin
    η ~ Normal(0.0, ω)
  end

  @pre begin
    baseline = θ₁*exp(η[1])
    d50 = θ₂
    dose_d50 = dose/(dose+d50)
    r = θr
  end

  @covariates dose

  @vars begin
    m = baseline*(1 - dose_d50)
    p = r/(m + r)
  end

  @derived begin
    dv ~ @. NegativeBinomial(r, p)
  end
end

param = init_param(negativebinomial_model)
```

and simulate runs from the model:

```julia
sim_negativebinomial = simobs(negativebinomial_model, pd_poisson, param; ensemblealg = EnsembleSerial())
```

Here `dv` is an integer output probabilistically dependent on the dose.

Let's read the data back in to re-estimate the model parameters


```julia
pd_negativebinomial  = Subject.(sim_negativebinomial)
```

And fit the data

```julia
ngebin_res = fit(negativebinomial_model, pd_negativebinomial, param, Pumas.FOCE())
coeftable(ngebin_res)
```

and make an inference

```julia
infer(ngebin_res)  |> coeftable
