---
title : Non Compartmental Analysis
author : PumasAI
date : April 2021
---

Load the necessary libraries

```julia
using PumasTutorials, NCA, NCAUtilities, CSV, DataFrames, StatsPlots, Statistics, Unitful
```

## Introduction

In this tutorial you will learn how to compute specific parameters using Non-Compartmental Analysis


PK was collected in 107 subjects who received 50 mg q24 hours for 5 days, on Day 1 (first dose) and Day 5 (last dose at steady-state).
We will compute _**Single Dose**_ and _**Multiple Dose**_ NCA parameters

In the given dataset
 * Time  = hrs
 * Conc  = mg/L
 * Amt   = mg

**Step1:** Load the NCA dataset using the `CSV.read` function and convert it to a Dataframe

```julia
data = DataFrame(CSV.File(joinpath(dirname(pathof(PumasTutorials)), "..", "tutorials", "nca", "NCA_tutorial.csv")))
first(data, 6)
```

#### Single-dose NCA

Filter data for time <= 24 hrs to perform the Single-dose NCA


```julia
single_dose_data  = filter(x -> x.TIME <= 24 , data)
```

We will specify the units of time, concentration and amount which will be mapped to `read_nca`

```julia
timeu = u"hr"
concu = u"mg/L"
amtu  = u"mg";
```

Parse the dataframe to a `read_nca` function and map the necessary columns from the dataset

 * id
 * conc
 * time
 * ocassion - if you have different ocassions
 * amt
 * route - Infusion "inf", IV "iv", Oral "ev"
 * duration - Only for Infusion
 * group - any other grouping variables that you require in the output


**Note:**

 * If your datset has the specific style of headers for the column you _will not need_ to map them seperately. They will be
automatically determined by Pumas. eg: id, time, observations, amt, route, duration(if needed), group(if needed)

 * _Do not specify the Inter Dose Interval_ in this case because we are computing Single-Dose NCA parameters

```julia
pop        = read_nca(  single_dose_data,
                        id    = :ID,
                        time  = :TIME,
                        observations  = :CONC,
                        amt   = :AMT,
                        route = :ROUTE,
                        llq   = 0.001concu,
                        timeu = timeu,
                        concu = concu,
                        amtu  = amtu
                      )
```

Plot a exploratory graph of ***Concentration vs Time*** for the first subject.

```julia
NCAUtilities.observations_vs_time(pop[1])
```

```julia
report0     = run_nca(pop, sigdigits=3)
```

##### Compute Specific Parameters

We will now compute the specific parameters that we require and merge all of them to a dataframe

```julia
vz        = NCA.vz(pop, sigdigits=3)  # Volume of Distribution/F, in this case since the drug is given orally
cl        = NCA.cl(pop, sigdigits=3)  # Clearance/F, in this case since the drug is given orally
lambdaz   = NCA.lambdaz(pop, threshold=3, sigdigits=3)  # Terminal Elimination Rate Constant, threshold=3 specifies the max no. of time point used for calculation
lambdaz_1 = NCA.lambdaz(pop, slopetimes=[8,12,16].*timeu, sigdigits=3) # slopetimes in this case specifies the exact time point you want for the calculation
thalf     = NCA.thalf(pop[4], sigdigits=3) # Half-life calculation for 4th individual
cmax_d    = NCA.cmax(pop, normalize=true, sigdigits=3) # Dose Normalized Cmax
mrt       = NCA.mrt(pop, sigdigits=3) # Mean residence time
aumc      = NCA.aumc(pop, method=:linlog, sigdigits=3) # AUMC calculation, using :linlog method
rename!(lambdaz_1, Dict(:lambdaz => "lambdaz_specf")) #since we have two lambdaz calculation rename one column to merge in a dataframe
df_1      = innerjoin(vz,cl,lambdaz, lambdaz_1,cmax_d,mrt,aumc, on=[:id], makeunique=true)
```

##### Calculate AUC at specific intervals

Calculation of **AUC** at _specific time_ intervals and merge to the final report dataframe

```julia
auc0_12   = NCA.auc(pop, interval=(0,12).*timeu, method=:linuplogdown, sigdigits=3) #various other methods are :linear, :linlog
auc12_24  = NCA.auc(pop, interval=(12,24).*timeu, method=:linuplogdown, sigdigits=3)
final     = innerjoin(report0.reportdf, auc0_12, auc12_24, on = [:id], makeunique=true)
```

You can select the colums that you wish to see in the output

**Note:** Since this drug is given orally the parameters returned by NCA are **apparent** Volume of Distribution (Vz/F) and Clearance (Cl/F) where F is the bioavailability.

```julia
nca_output_single = select(final, :doseamt, :kel, :half_life, :cmax, :tmax, :auclast, :aucinf_obs, :vz_f_obs, :cl_f_obs, :aumcinf_obs, :auc0_12, :auc12_24)
```

Compute the Statistics of the selected variables that you require

```julia
Stat_report = describe(nca_output_single)
```

#### Multiple-dose NCA


Filter data for time >= 24 hrs to perform the Multiple-dose NCA


```julia
multiple_dose_data           = filter(x -> x.TIME > 24 , data)
```

In the case of multiple-dose NCA the extra parameters which are calculated based on the dosing interval (Ï„) will be included in the output.
You can select the NCA parameters that you wish to see in the output with the `parameters` keyword argument to `run_nca`
```julia
pop1       = read_nca( multiple_dose_data,
                       id    = :ID,
                       time  = :TIME,
                       observations  = :CONC,
                       amt   = :AMT,
                       route = :ROUTE,
                       ii    = :II,        # please specify II for Multiple-dose NCA
                       llq   = 0.001concu,
                       timeu = timeu,
                       concu = concu,
                       amtu  = amtu)
report1    = run_nca(pop1, sigdigits=3)
```

Similar to the Single-NCA you can compute individual parameters and merge them to the final report


Compute the summary statistics of the selected variables that you require

```julia
Stat_report1        = summarize(report1.reportdf, parameters = [:doseamt, :kel, :half_life, :tmax, :cmax, :auclast, :auc_tau_obs, :vz_f_obs, :cl_f_obs, :aumcinf_obs, :tau, :cavgss])
```

#### Documentation

Please refer to the [NCA Documentation](https://docs.pumas.ai/dev/basics/nca/) for any further help.

#### Save NCA Report

The NCA report can be saved as a CSV file for further analysis

```julia
CSV.write("NCA_single_dose.csv", final)      # Single-NCA final report
CSV.write("NCA_multiple_dose.csv", report1.reportdf)  # Multiple-NCA final report
```
